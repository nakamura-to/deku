var parser = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "Block": parse_Block,
        "Comment": parse_Comment,
        "Content": parse_Content,
        "Id": parse_Id,
        "Inverse": parse_Inverse,
        "Mustache": parse_Mustache,
        "Path": parse_Path,
        "Pipes": parse_Pipes,
        "Program": parse_Program,
        "Statement": parse_Statement,
        "Whitespace": parse_Whitespace,
        "_": parse__
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "Program";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_Program() {
        var cacheKey = 'Program@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var savedPos2 = pos;
        var result7 = parse_Statement();
        if (result7 !== null) {
          var result8 = [];
          var result9 = parse_Statement();
          while (result9 !== null) {
            result8.push(result9);
            var result9 = parse_Statement();
          }
          if (result8 !== null) {
            var result5 = [result7, result8];
          } else {
            var result5 = null;
            pos = savedPos2;
          }
        } else {
          var result5 = null;
          pos = savedPos2;
        }
        var result6 = result5 !== null
          ? (function(head, tail) {
                var statements = [head];
                var i;
                var len = tail.length;
                for (i = 0; i < len; i++) {
                  statements.push(tail[i]);
                }
                return {
                  type: 'type_program',
                  statements: statements
                };
              })(result5[0], result5[1])
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 0) === "") {
            var result2 = "";
            pos += 0;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"\"");
            }
          }
          var result3 = result2 !== null
            ? (function() {
                  return {
                    type: 'type_program',
                    statements: []
                  }
                })()
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Statement() {
        var cacheKey = 'Statement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result5 = parse_Block();
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var result4 = parse_Inverse();
          if (result4 !== null) {
            var result0 = result4;
          } else {
            var result3 = parse_Mustache();
            if (result3 !== null) {
              var result0 = result3;
            } else {
              var result2 = parse_Comment();
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_Content();
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Block() {
        var cacheKey = 'Block@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "{{#") {
          var result3 = "{{#";
          pos += 3;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"{{#\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_Path();
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                if (input.substr(pos, 2) === "}}") {
                  var result7 = "}}";
                  pos += 2;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"}}\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse_Program();
                  if (result8 !== null) {
                    if (input.substr(pos, 3) === "{{/") {
                      var result9 = "{{/";
                      pos += 3;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"{{/\"");
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse__();
                      if (result10 !== null) {
                        var result11 = parse_Path();
                        if (result11 !== null) {
                          var result12 = parse__();
                          if (result12 !== null) {
                            if (input.substr(pos, 2) === "}}") {
                              var result13 = "}}";
                              pos += 2;
                            } else {
                              var result13 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"}}\"");
                              }
                            }
                            if (result13 !== null) {
                              var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13];
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(open, program, close) {
                verifyMatch(open, close);
                return {
                  type: 'type_block',
                  name: open,
                  program: program
                };
              })(result1[2], result1[5], result1[8])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Inverse() {
        var cacheKey = 'Inverse@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "{{^") {
          var result3 = "{{^";
          pos += 3;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"{{^\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_Path();
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                if (input.substr(pos, 2) === "}}") {
                  var result7 = "}}";
                  pos += 2;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"}}\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse_Program();
                  if (result8 !== null) {
                    if (input.substr(pos, 3) === "{{/") {
                      var result9 = "{{/";
                      pos += 3;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"{{/\"");
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse__();
                      if (result10 !== null) {
                        var result11 = parse_Path();
                        if (result11 !== null) {
                          var result12 = parse__();
                          if (result12 !== null) {
                            if (input.substr(pos, 2) === "}}") {
                              var result13 = "}}";
                              pos += 2;
                            } else {
                              var result13 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"}}\"");
                              }
                            }
                            if (result13 !== null) {
                              var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13];
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(open, program, close) {
                verifyMatch(open, close);
                return {
                  type: 'type_inverse',
                  name: open,
                  program: program
                };
              })(result1[2], result1[5], result1[8])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Mustache() {
        var cacheKey = 'Mustache@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        if (input.substr(pos, 2) === "{{") {
          var result13 = "{{";
          pos += 2;
        } else {
          var result13 = null;
          if (reportMatchFailures) {
            matchFailed("\"{{\"");
          }
        }
        if (result13 !== null) {
          var result14 = parse__();
          if (result14 !== null) {
            var result15 = parse_Path();
            if (result15 !== null) {
              var result16 = parse_Pipes();
              if (result16 !== null) {
                var result17 = parse__();
                if (result17 !== null) {
                  if (input.substr(pos, 2) === "}}") {
                    var result18 = "}}";
                    pos += 2;
                  } else {
                    var result18 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"}}\"");
                    }
                  }
                  if (result18 !== null) {
                    var result11 = [result13, result14, result15, result16, result17, result18];
                  } else {
                    var result11 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result11 = null;
                  pos = savedPos3;
                }
              } else {
                var result11 = null;
                pos = savedPos3;
              }
            } else {
              var result11 = null;
              pos = savedPos3;
            }
          } else {
            var result11 = null;
            pos = savedPos3;
          }
        } else {
          var result11 = null;
          pos = savedPos3;
        }
        var result12 = result11 !== null
          ? (function(name, pipes) {
                return {
                  type: 'type_mustache',
                  name: name,
                  pipes: pipes,
                  escape: true
                };
              })(result11[2], result11[3])
          : null;
        if (result12 !== null) {
          var result10 = result12;
        } else {
          var result10 = null;
          pos = savedPos2;
        }
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 3) === "{{{") {
            var result4 = "{{{";
            pos += 3;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"{{{\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result6 = parse_Path();
              if (result6 !== null) {
                var result7 = parse_Pipes();
                if (result7 !== null) {
                  var result8 = parse__();
                  if (result8 !== null) {
                    if (input.substr(pos, 3) === "}}}") {
                      var result9 = "}}}";
                      pos += 3;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"}}}\"");
                      }
                    }
                    if (result9 !== null) {
                      var result2 = [result4, result5, result6, result7, result8, result9];
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(name, pipes) {
                  return {
                    type: 'type_mustache',
                    name: name,
                    pipes: pipes,
                    escape: false
                  };
                })(result2[2], result2[3])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Pipes() {
        var cacheKey = 'Pipes@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var result5 = [];
        var savedPos3 = pos;
        var result8 = parse__();
        if (result8 !== null) {
          if (input.substr(pos, 1) === "|") {
            var result9 = "|";
            pos += 1;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"|\"");
            }
          }
          if (result9 !== null) {
            var result10 = parse__();
            if (result10 !== null) {
              var result11 = parse_Id();
              if (result11 !== null) {
                var result7 = [result8, result9, result10, result11];
              } else {
                var result7 = null;
                pos = savedPos3;
              }
            } else {
              var result7 = null;
              pos = savedPos3;
            }
          } else {
            var result7 = null;
            pos = savedPos3;
          }
        } else {
          var result7 = null;
          pos = savedPos3;
        }
        while (result7 !== null) {
          result5.push(result7);
          var savedPos3 = pos;
          var result8 = parse__();
          if (result8 !== null) {
            if (input.substr(pos, 1) === "|") {
              var result9 = "|";
              pos += 1;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\"|\"");
              }
            }
            if (result9 !== null) {
              var result10 = parse__();
              if (result10 !== null) {
                var result11 = parse_Id();
                if (result11 !== null) {
                  var result7 = [result8, result9, result10, result11];
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
              } else {
                var result7 = null;
                pos = savedPos3;
              }
            } else {
              var result7 = null;
              pos = savedPos3;
            }
          } else {
            var result7 = null;
            pos = savedPos3;
          }
        }
        var result6 = result5 !== null
          ? (function(pipes) {
                var result = [];
                var i;
                var len = pipes.length;
                for (i = 0; i < len; i++) {
                  result.push(pipes[i][3]);
                }
                return result;
              })(result5)
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos2;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result2 = [];
          var result3 = result2 !== null
            ? (function() {
                  return [];
                })()
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Comment() {
        var cacheKey = 'Comment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "{{!") {
          var result3 = "{{!";
          pos += 3;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"{{!\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var savedPos3 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 2) === "}}") {
            var result9 = "}}";
            pos += 2;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"}}\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result9 === null) {
            var result7 = '';
          } else {
            var result7 = null;
            pos = savedPos3;
          }
          if (result7 !== null) {
            if (input.length > pos) {
              var result8 = input.charAt(pos);
              pos++;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed('any character');
              }
            }
            if (result8 !== null) {
              var result6 = [result7, result8];
            } else {
              var result6 = null;
              pos = savedPos2;
            }
          } else {
            var result6 = null;
            pos = savedPos2;
          }
          while (result6 !== null) {
            result4.push(result6);
            var savedPos2 = pos;
            var savedPos3 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 2) === "}}") {
              var result9 = "}}";
              pos += 2;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\"}}\"");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result9 === null) {
              var result7 = '';
            } else {
              var result7 = null;
              pos = savedPos3;
            }
            if (result7 !== null) {
              if (input.length > pos) {
                var result8 = input.charAt(pos);
                pos++;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result8 !== null) {
                var result6 = [result7, result8];
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            } else {
              var result6 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 2) === "}}") {
              var result5 = "}}";
              pos += 2;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"}}\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(comment) {
                var chars = [];
                var i;
                var len = comment.length;
                for (i = 0; i < len; i++) {
                  chars.push(comment[i][1]);
                }
                return {
                  type: 'type_comment',
                  comment: chars.join('')
                };
              })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Content() {
        var cacheKey = 'Content@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedPos2 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos, 2) === "{{") {
          var result6 = "{{";
          pos += 2;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("\"{{\"");
          }
        }
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result6 === null) {
          var result4 = '';
        } else {
          var result4 = null;
          pos = savedPos2;
        }
        if (result4 !== null) {
          if (input.length > pos) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed('any character');
            }
          }
          if (result5 !== null) {
            var result3 = [result4, result5];
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 2) === "{{") {
              var result6 = "{{";
              pos += 2;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"{{\"");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result6 === null) {
              var result4 = '';
            } else {
              var result4 = null;
              pos = savedPos2;
            }
            if (result4 !== null) {
              if (input.length > pos) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(content) {
                var chars = [];
                var i;
                var len = content.length;
                for (i = 0; i < len; i++) {
                  chars.push(content[i][1]);
                }
                return {
                  type: 'type_content',
                  content: chars.join('')
                };
              })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Path() {
        var cacheKey = 'Path@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Id();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          if (input.substr(pos, 1) === ".") {
            var result6 = ".";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result6 !== null) {
            var result7 = parse_Id();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            if (input.substr(pos, 1) === ".") {
              var result6 = ".";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse_Id();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(head, tail) {
                var segments = [head];
                var i;
                var len = tail.length;
                for (i = 0; i < len; i++) {
                  segments.push(tail[i][1]);
                }
                return {
                  type: 'type_name',
                  path: segments.join('.'),
                  segments: segments,
                  isSimple: segments.length === 1
                };
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Id() {
        var cacheKey = 'Id@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[a-zA-Z0-9_$-%@!]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z0-9_$-%@!]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[a-zA-Z0-9_$-%@!]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[a-zA-Z0-9_$-%@!]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(id) {
                return id.join('');
              })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__() {
        var cacheKey = '_@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        var result1 = parse_Whitespace();
        while (result1 !== null) {
          result0.push(result1);
          var result1 = parse_Whitespace();
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Whitespace() {
        var cacheKey = 'Whitespace@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[ 	\n\r]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[ 	\\n\\r]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
    function verifyMatch(open, close)  {
      
      if (open.path !== close.path) {
      
        var errorPosition = computeErrorPosition();
      
        throw new this.SyntaxError(
      
          open.path + " doesn't match " + close.path,
      
          errorPosition.line,
      
          errorPosition.column
      
        );
      
      }
      
    }
      
  
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
