// tempura.js 0.0.4-dev12
// tempura is simple templating library in javascript.
// For all details and documentation:
// http://nakamura-to.github.com/tempura/
//noinspection ThisExpressionReferencesGlobalObjectJS
(function (global) {
  'use strict';
// BEGIN PARSER
var parser = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "Block": parse_Block,
        "Comment": parse_Comment,
        "Content": parse_Content,
        "Id": parse_Id,
        "Inverse": parse_Inverse,
        "Mustache": parse_Mustache,
        "Path": parse_Path,
        "Pipeline": parse_Pipeline,
        "Program": parse_Program,
        "Statement": parse_Statement,
        "Whitespace": parse_Whitespace,
        "_": parse__
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "Program";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_Program() {
        var cacheKey = 'Program@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var savedPos2 = pos;
        var result7 = parse_Statement();
        if (result7 !== null) {
          var result8 = [];
          var result9 = parse_Statement();
          while (result9 !== null) {
            result8.push(result9);
            var result9 = parse_Statement();
          }
          if (result8 !== null) {
            var result5 = [result7, result8];
          } else {
            var result5 = null;
            pos = savedPos2;
          }
        } else {
          var result5 = null;
          pos = savedPos2;
        }
        var result6 = result5 !== null
          ? (function(head, tail) {
                var statements = [head];
                var i;
                var len = tail.length;
                for (i = 0; i < len; i++) {
                  statements.push(tail[i]);
                }
                return {
                  type: 'type_program',
                  statements: statements
                };
              })(result5[0], result5[1])
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 0) === "") {
            var result2 = "";
            pos += 0;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"\"");
            }
          }
          var result3 = result2 !== null
            ? (function() {
                  return {
                    type: 'type_program',
                    statements: []
                  }
                })()
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Statement() {
        var cacheKey = 'Statement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result5 = parse_Block();
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var result4 = parse_Inverse();
          if (result4 !== null) {
            var result0 = result4;
          } else {
            var result3 = parse_Mustache();
            if (result3 !== null) {
              var result0 = result3;
            } else {
              var result2 = parse_Comment();
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_Content();
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Block() {
        var cacheKey = 'Block@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "{{#") {
          var result3 = "{{#";
          pos += 3;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"{{#\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_Path();
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                if (input.substr(pos, 2) === "}}") {
                  var result7 = "}}";
                  pos += 2;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"}}\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse_Program();
                  if (result8 !== null) {
                    if (input.substr(pos, 3) === "{{/") {
                      var result9 = "{{/";
                      pos += 3;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"{{/\"");
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse__();
                      if (result10 !== null) {
                        var result11 = parse_Path();
                        if (result11 !== null) {
                          var result12 = parse__();
                          if (result12 !== null) {
                            if (input.substr(pos, 2) === "}}") {
                              var result13 = "}}";
                              pos += 2;
                            } else {
                              var result13 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"}}\"");
                              }
                            }
                            if (result13 !== null) {
                              var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13];
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(open, program, close) {
                verifyMatch(open, close);
                return {
                  type: 'type_block',
                  name: open,
                  program: program
                };
              })(result1[2], result1[5], result1[8])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Inverse() {
        var cacheKey = 'Inverse@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "{{^") {
          var result3 = "{{^";
          pos += 3;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"{{^\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_Path();
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                if (input.substr(pos, 2) === "}}") {
                  var result7 = "}}";
                  pos += 2;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"}}\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse_Program();
                  if (result8 !== null) {
                    if (input.substr(pos, 3) === "{{/") {
                      var result9 = "{{/";
                      pos += 3;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"{{/\"");
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse__();
                      if (result10 !== null) {
                        var result11 = parse_Path();
                        if (result11 !== null) {
                          var result12 = parse__();
                          if (result12 !== null) {
                            if (input.substr(pos, 2) === "}}") {
                              var result13 = "}}";
                              pos += 2;
                            } else {
                              var result13 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"}}\"");
                              }
                            }
                            if (result13 !== null) {
                              var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13];
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(open, program, close) {
                verifyMatch(open, close);
                return {
                  type: 'type_inverse',
                  name: open,
                  program: program
                };
              })(result1[2], result1[5], result1[8])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Mustache() {
        var cacheKey = 'Mustache@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        if (input.substr(pos, 2) === "{{") {
          var result13 = "{{";
          pos += 2;
        } else {
          var result13 = null;
          if (reportMatchFailures) {
            matchFailed("\"{{\"");
          }
        }
        if (result13 !== null) {
          var result14 = parse__();
          if (result14 !== null) {
            var result15 = parse_Path();
            if (result15 !== null) {
              var result16 = parse_Pipeline();
              if (result16 !== null) {
                var result17 = parse__();
                if (result17 !== null) {
                  if (input.substr(pos, 2) === "}}") {
                    var result18 = "}}";
                    pos += 2;
                  } else {
                    var result18 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"}}\"");
                    }
                  }
                  if (result18 !== null) {
                    var result11 = [result13, result14, result15, result16, result17, result18];
                  } else {
                    var result11 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result11 = null;
                  pos = savedPos3;
                }
              } else {
                var result11 = null;
                pos = savedPos3;
              }
            } else {
              var result11 = null;
              pos = savedPos3;
            }
          } else {
            var result11 = null;
            pos = savedPos3;
          }
        } else {
          var result11 = null;
          pos = savedPos3;
        }
        var result12 = result11 !== null
          ? (function(name, processors) {
                return {
                  type: 'type_mustache',
                  name: name,
                  processors: processors,
                  escape: true
                };
              })(result11[2], result11[3])
          : null;
        if (result12 !== null) {
          var result10 = result12;
        } else {
          var result10 = null;
          pos = savedPos2;
        }
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 3) === "{{{") {
            var result4 = "{{{";
            pos += 3;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"{{{\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result6 = parse_Path();
              if (result6 !== null) {
                var result7 = parse_Pipeline();
                if (result7 !== null) {
                  var result8 = parse__();
                  if (result8 !== null) {
                    if (input.substr(pos, 3) === "}}}") {
                      var result9 = "}}}";
                      pos += 3;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"}}}\"");
                      }
                    }
                    if (result9 !== null) {
                      var result2 = [result4, result5, result6, result7, result8, result9];
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(name, processors) {
                  return {
                    type: 'type_mustache',
                    name: name,
                    processors: processors,
                    escape: false
                  };
                })(result2[2], result2[3])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Pipeline() {
        var cacheKey = 'Pipeline@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var result5 = [];
        var savedPos3 = pos;
        var result8 = parse__();
        if (result8 !== null) {
          if (input.substr(pos, 1) === "|") {
            var result9 = "|";
            pos += 1;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"|\"");
            }
          }
          if (result9 !== null) {
            var result10 = parse__();
            if (result10 !== null) {
              var result11 = parse_Id();
              if (result11 !== null) {
                var result7 = [result8, result9, result10, result11];
              } else {
                var result7 = null;
                pos = savedPos3;
              }
            } else {
              var result7 = null;
              pos = savedPos3;
            }
          } else {
            var result7 = null;
            pos = savedPos3;
          }
        } else {
          var result7 = null;
          pos = savedPos3;
        }
        while (result7 !== null) {
          result5.push(result7);
          var savedPos3 = pos;
          var result8 = parse__();
          if (result8 !== null) {
            if (input.substr(pos, 1) === "|") {
              var result9 = "|";
              pos += 1;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\"|\"");
              }
            }
            if (result9 !== null) {
              var result10 = parse__();
              if (result10 !== null) {
                var result11 = parse_Id();
                if (result11 !== null) {
                  var result7 = [result8, result9, result10, result11];
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
              } else {
                var result7 = null;
                pos = savedPos3;
              }
            } else {
              var result7 = null;
              pos = savedPos3;
            }
          } else {
            var result7 = null;
            pos = savedPos3;
          }
        }
        var result6 = result5 !== null
          ? (function(pipes) {
                var processors = [];
                var i;
                var len = pipes.length;
                for (i = 0; i < len; i++) {
                  processors.push(pipes[i][3]);
                }
                return processors;
              })(result5)
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos2;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result2 = [];
          var result3 = result2 !== null
            ? (function() {
                  return [];
                })()
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Comment() {
        var cacheKey = 'Comment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "{{!") {
          var result3 = "{{!";
          pos += 3;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"{{!\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var savedPos3 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 2) === "}}") {
            var result9 = "}}";
            pos += 2;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"}}\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result9 === null) {
            var result7 = '';
          } else {
            var result7 = null;
            pos = savedPos3;
          }
          if (result7 !== null) {
            if (input.length > pos) {
              var result8 = input.charAt(pos);
              pos++;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed('any character');
              }
            }
            if (result8 !== null) {
              var result6 = [result7, result8];
            } else {
              var result6 = null;
              pos = savedPos2;
            }
          } else {
            var result6 = null;
            pos = savedPos2;
          }
          while (result6 !== null) {
            result4.push(result6);
            var savedPos2 = pos;
            var savedPos3 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 2) === "}}") {
              var result9 = "}}";
              pos += 2;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\"}}\"");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result9 === null) {
              var result7 = '';
            } else {
              var result7 = null;
              pos = savedPos3;
            }
            if (result7 !== null) {
              if (input.length > pos) {
                var result8 = input.charAt(pos);
                pos++;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result8 !== null) {
                var result6 = [result7, result8];
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            } else {
              var result6 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 2) === "}}") {
              var result5 = "}}";
              pos += 2;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"}}\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(comment) {
                var chars = [];
                var i;
                var len = comment.length;
                for (i = 0; i < len; i++) {
                  chars.push(comment[i][1]);
                }
                return {
                  type: 'type_comment',
                  comment: chars.join('')
                };
              })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Content() {
        var cacheKey = 'Content@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedPos2 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos, 2) === "{{") {
          var result6 = "{{";
          pos += 2;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("\"{{\"");
          }
        }
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result6 === null) {
          var result4 = '';
        } else {
          var result4 = null;
          pos = savedPos2;
        }
        if (result4 !== null) {
          if (input.length > pos) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed('any character');
            }
          }
          if (result5 !== null) {
            var result3 = [result4, result5];
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 2) === "{{") {
              var result6 = "{{";
              pos += 2;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"{{\"");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result6 === null) {
              var result4 = '';
            } else {
              var result4 = null;
              pos = savedPos2;
            }
            if (result4 !== null) {
              if (input.length > pos) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(content) {
                var chars = [];
                var i;
                var len = content.length;
                for (i = 0; i < len; i++) {
                  chars.push(content[i][1]);
                }
                return {
                  type: 'type_content',
                  content: chars.join('')
                };
              })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Path() {
        var cacheKey = 'Path@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Id();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          if (input.substr(pos, 1) === ".") {
            var result6 = ".";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result6 !== null) {
            var result7 = parse_Id();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            if (input.substr(pos, 1) === ".") {
              var result6 = ".";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse_Id();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(head, tail) {
                var segments = [head];
                var i;
                var len = tail.length;
                for (i = 0; i < len; i++) {
                  segments.push(tail[i][1]);
                }
                return {
                  type: 'type_name',
                  path: segments.join('.'),
                  segments: segments,
                  isSimple: segments.length === 1
                };
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Id() {
        var cacheKey = 'Id@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[a-zA-Z0-9_$-%@!]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z0-9_$-%@!]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[a-zA-Z0-9_$-%@!]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[a-zA-Z0-9_$-%@!]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(id) {
                return id.join('');
              })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__() {
        var cacheKey = '_@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        var result1 = parse_Whitespace();
        while (result1 !== null) {
          result0.push(result1);
          var result1 = parse_Whitespace();
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Whitespace() {
        var cacheKey = 'Whitespace@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[ 	\n\r]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[ 	\\n\\r]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
    function verifyMatch(open, close)  {
      
      if (open.path !== close.path) {
      
        var errorPosition = computeErrorPosition();
      
        throw new parser.SyntaxError(
      
          open.path + " doesn't match " + close.path,
      
          errorPosition.line,
      
          errorPosition.column
      
        );
      
      }
      
    }
      
  
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
// END PARSER

  var util = {

    toString: Object.prototype.toString,

    isObject: function (obj) {
      return obj === Object(obj);
    },

    isArray: (function () {
      if (Array.isArray) {
        return Array.isArray;
      }
      return function (obj) {
        return util.toString.call(obj) === '[object Array]';
      }
    }()),

    extend: function (target) {
      var len = arguments.length;
      var i;
      var source;
      var key;
      if (target == null) {
        return target;
      }
      for (i = 1; i < len; i++) {
        source = arguments[i];
        if (source != null) {
          for (key in source) {
            if (target[key] === void 0) {
              target[key] = source[key];
            }
          }
        }
      }
      return target;
    }

  };

  var compiler = (function () {
    var Compiler;
    var JsCompiler;

    Compiler = function (context) {
      this.opcodes = [];
      this.context = context || {
        allEnvironments: []
      };
      this.index = this.context.allEnvironments.length;
      this.name = 'program' + this.index;
      this.context.allEnvironments.push(this);
    };

    Compiler.OPCODE_PARAM_LENGTH_MAP = {
      op_append: 0,
      op_appendContent: 1,
      op_applyProcessor: 2,
      op_applyPrePipeline: 1,
      op_applyPostPipeline: 1,
      op_escape: 0,
      op_escapeAndAppendContent: 1,
      op_evaluateValue: 1,
      op_lookupFromContext: 1,
      op_lookupFromTmp: 1,
      op_invokeProgram: 1,
      op_invokeProgramInverse: 1
    };

    Compiler.prototype = {

      compile: function (program) {
        var statements = program.statements;
        var statement;
        var i;
        var len = statements.length;
        var isNextConsumed;
        for (i = 0; i < len; i++) {
          statement = statements[i];
          isNextConsumed = this[statement.type](statement, statements[i + 1]);
          if (isNextConsumed) {
            i++;
          }
        }
        return this;
      },

      compileProgram: function (program) {
        var compiler = new Compiler(this.context);
        return compiler.compile(program);
      },

      pushOpcode: function (name, param1, param2) {
        this.opcodes.push(name);
        if (param1 !== void 0) {
          this.opcodes.push(param1);
        }
        if (param2 !== void 0) {
          this.opcodes.push(param2);
        }
      },

      type_block : function (node) {
        var environment = this.compileProgram(node.program);
        var name = node.name;
        this.type_name(name);
        this.pushOpcode('op_evaluateValue', name.path);
        this.pushOpcode('op_invokeProgram', environment.name);
        this.pushOpcode('op_append');
      },

      type_inverse: function (node) {
        var environment = this.compileProgram(node.program);
        var name = node.name;
        this.type_name(name);
        this.pushOpcode('op_evaluateValue', name.path);
        this.pushOpcode('op_invokeProgramInverse', environment.name);
        this.pushOpcode('op_append');
      },

      type_content: function (node) {
        this.pushOpcode('op_appendContent', node.content);
      },

      type_comment: function () {
      },

      type_mustache: function (node, next) {
        var processors = node.processors;
        var i;
        var len = processors.length;
        var name = node.name;
        var path = name.path;
        this.type_name(name);
        this.pushOpcode('op_evaluateValue', path);
        this.pushOpcode('op_applyPrePipeline', path);
        for (i = 0; i < len; i++) {
          this.pushOpcode('op_applyProcessor', processors[i], path);
        }
        this.pushOpcode('op_applyPostPipeline', path);
        if (node.escape) {
          if (next && next.type === 'type_content') {
            this.pushOpcode('op_escapeAndAppendContent', next.content);
            return true;
          } else {
            this.pushOpcode('op_escape');
          }
        }
        this.pushOpcode('op_append');
        return false;
      },

      type_name: function (node) {
        var segments = node.segments;
        var i;
        var len = segments.length;
        this.pushOpcode('op_lookupFromContext', segments[0]);
        for (i = 1; i < len; i++) {
          this.pushOpcode('op_lookupFromTmp', segments[i]);
        }
      }
    };

    JsCompiler = function (environment) {
      this.environment = environment;
      this.name = environment.name;
      this.allEnvironments = environment.context.allEnvironments;
      this.source = [''];
      this.tmpVarSlot = 0;
      this.tmpVars = [];
    };

    JsCompiler.ROOT_CONTEXT = '$root';
    JsCompiler.PARENT_CONTEXT = '$parent';
    JsCompiler.THIS_CONTEXT = '$this';
    JsCompiler.INDEX = '$index';
    JsCompiler.HAS_NEXT = '$hasNext';

    JsCompiler.prototype = {

      lookup: function (contextName, propName) {
        return contextName + '["' + propName + '"]';
      },

      appendToBuffer: function (s) {
        this.source.push('buffer += ' + s + ';');
      },

      quoteString: (function () {
        var map =  {
          '\\': '\\\\',
          '"': '\\"',
          '\n': '\\n',
          '\r': '\\r'
        };
        return function (value) {
          return '"' + value.replace(/[\\"\n\r]/g, function(s) {
            return map[s];
          }) + '"';
        }
      }()),

      compileDescendants: function () {
        var result = [];
        var allEnvironments = this.allEnvironments;
        var i;
        var len = allEnvironments.length;
        var environment;
        var jsc;
        var subProgram;
        for (i = 1; i < len; i++) {
          environment = allEnvironments[i];
          jsc = new JsCompiler(environment);
          subProgram = jsc.compileSubProgram();
          result.push(subProgram);
        }
        return result;
      },

      execOpcodes: function () {
        var opcodes = this.environment.opcodes;
        var i;
        var len = opcodes.length;
        var opcode;
        var j;
        var paramLen;
        var params;
        for (i = 0; i < len;) {
          opcode = opcodes[i];
          params = [];
          paramLen = Compiler.OPCODE_PARAM_LENGTH_MAP[opcode];
          for (i++, j = 0; i < len && j < paramLen; i++, j++) {
            params.push(opcodes[i]);
          }
          this[opcode].apply(this, params);
        }
      },

      generate: function (subPrograms, asObject) {
        var body;
        this.source[0] = this.source[0] + 'var tmp, buffer = "", ' +
          'escape = this.escape, handleBlock = this.handleBlock, handleInverse = this.handleInverse, ' +
          'noSuchValue = this.noSuchValue, noSuchProcessor = this.noSuchProcessor, ' +
          'prePipeline = this.prePipeline, postPipeline = this.postPipeline, processors = this.processors, processor;' +
          '\n\n' + subPrograms.join('\n\n') + '\n';
        this.source.push('return buffer;');
        body = '  ' + this.source.join('\n  ');
        if (asObject) {
          return new Function('context, contextStack, index, hasNext', body);
        } else {
          return 'function (context, contextStack, index, hasNext) {\n' + body + '\n' + '}';
        }
      },

      compile: function (asObject) {
        var subPrograms = this.compileDescendants();
        this.execOpcodes();
        return this.generate(subPrograms, asObject);
      },

      generateSubProgram: function () {
        var body;
        var indent = '  ';
        this.source[0] = this.source[0] + 'var tmp, buffer = "";';
        this.source.push('return buffer;');
        body = '  ' + indent + this.source.join('\n  ' + indent);
        return indent + 'function ' + this.name + ' (context, contextStack, index, hasNext) {\n' + body + '\n'+ indent + '}';
      },

      compileSubProgram: function () {
        this.execOpcodes();
        return this.generateSubProgram();
      },

      op_invokeProgram: function (name) {
        this.source.push('tmp = handleBlock(context, contextStack, tmp, ' + name + ');');
      },

      op_invokeProgramInverse: function (name) {
        this.source.push('tmp = handleInverse(context, contextStack, tmp, ' + name + ');');
      },

      op_applyProcessor: function (processorName, valueName) {
        this.source.push('processor = ' + this.lookup('context', processorName) + ';');
        this.source.push('if (typeof processor === "function") { tmp = processor.call(context, tmp, "' + valueName + '", index, hasNext); }');
        this.source.push('else { processor = ' + this.lookup('processors', processorName) + ';');
        this.source.push('  if (typeof processor === "function") { tmp = processor.call(context, tmp, "' + valueName + '", index, hasNext); }');
        this.source.push('  else { tmp = noSuchProcessor.call(context, "' + processorName + '", tmp, "' + valueName + '"); }}');
      },

      op_applyPrePipeline: function (valueName) {
        this.source.push('tmp = prePipeline.call(context, tmp, "' + valueName + '", index, hasNext);');
      },

      op_applyPostPipeline: function (valueName) {
        this.source.push('tmp = postPipeline.call(context, tmp, "' + valueName + '", index, hasNext);');
      },

      op_escape: function () {
        this.source.push('tmp = escape(tmp);');
      },

      op_escapeAndAppendContent: function (content) {
        content = this.quoteString(content);
        this.appendToBuffer('escape(tmp) + ' + content);
      },

      op_append: function () {
        this.appendToBuffer('tmp');
      },

      op_appendContent: function (content) {
        content = this.quoteString(content);
        this.appendToBuffer(content);
      },

      op_evaluateValue: function (name) {
        this.source.push('if (typeof tmp === "function") { tmp = tmp.call(context); }');
        this.source.push('else if (tmp === void 0) { tmp = noSuchValue.call(context, "' + name + '"); }');
      },

      op_lookupFromContext: function (name) {
        switch (name) {
          case JsCompiler.ROOT_CONTEXT:
            this.source.push('tmp = contextStack[0];')
            break;
          case JsCompiler.PARENT_CONTEXT:
            this.source.push('tmp = contextStack[contextStack.length - 2];');
            break;
          case JsCompiler.THIS_CONTEXT:
            this.source.push('tmp = context;');
            break;
          case JsCompiler.INDEX:
            this.source.push('tmp = index;');
            break;
          case JsCompiler.HAS_NEXT:
            this.source.push('tmp = hasNext;');
            break;
          default:
            this.source.push('tmp = ' + this.lookup('context', name) + ';');
        }
      },

      op_lookupFromTmp: function (name) {
        this.source.push('tmp = (tmp == null) ? tmp : ' + this.lookup('tmp', name) + ';');
      }
    };

    var parse = function (template) {
      try {
        return parser.parse(template);
      } catch (e) {
        if (e.name === 'SyntaxError') {
          throw new Error(e.message + ' line=' + e.line + '. column=' + e.column + '.\n' + template);
        }
        throw e;
      }
    };

    var compile = function (source) {
      var ast = parse(source);
      var compiler = new Compiler();
      var environment = compiler.compile(ast);
      var jsCompiler = new JsCompiler(environment);
      return jsCompiler.compile(true);
    };

    return {
      Compiler: Compiler,
      JsCompiler: JsCompiler,
      parse: parse,
      compile: compile
    };
  }());

  var core = {

    escape: (function () {
      var map = {
        '&': '&amp;',
        '"': '&quot;',
        "'": '&#39;',
        '<': '&lt;',
        '>': '&gt;'
      };
      return function (value) {
        if (value == null) {
          return '';
        }
        value = String(value);
        return value.replace(/[&"'<>]/g, function (s) {
          return map[s];
        });
      }
    }()),

    handleBlock: function (context, contextStack, value, fn) {
      var result = '';
      var i;
      var len;
      var element;
      if (util.isArray(value)) {
        len = value.length;
        for (i = 0; i < len; i++) {
          element = value[i];
          contextStack.push(element);
          result += fn(element, contextStack, i, i + 1 < len);
          contextStack.pop();
        }
      } else if (util.isObject(value)) {
        contextStack.push(value);
        result = fn(value, contextStack);
        contextStack.pop();
      } else if (value) {
        result = fn(context, contextStack);
      }
      return result;
    },

    handleInverse: function (context, contextStack, value, fn) {
      var result = '';
      if (!value) {
        result = fn(context, contextStack);
      } else if ((util.isArray(value) && value.length === 0)) {
        result = fn(context, contextStack);
      }
      return result;
    },

    prepare: function (source, options) {
      var template = compiler.compile(source);
      var templateContext = {
        escape: core.escape,
        handleBlock: core.handleBlock,
        handleInverse: core.handleInverse,
        noSuchValue: options.noSuchValue,
        noSuchProcessor: options.noSuchProcessor,
        prePipeline: options.prePipeline,
        postPipeline: options.postPipeline,
        processors: options.processors
      };
      var program = function (context, contextStack, index, hasNext) {
        return template.call(templateContext, context, contextStack, index ,hasNext);
      };
      return {
        render: function (data) {
          return templateContext.handleBlock(data, [data], data, program);
        }
      };
    }

  };

  var tempura =  (function () {

    return {
      name: 'tempura',

      version: '0.0.4-dev12',

      settings: {

        processors: {
        },

        prePipeline: function (value, valueName, index, hasNext) {
          return value;
        },

        postPipeline: function (value, valueName, index, hasNext) {
          return value == null ? '': value;
        },

        noSuchValue: function (valueName) {
          return;
        },

        noSuchProcessor: function (processorName, value, valueName) {
          return value;
        }
      },

      prepare: function (source, options) {
        var opts = {};
        options = options || {};
        opts.noSuchValue = options.noSuchValue || this.settings.noSuchValue;
        opts.noSuchProcessor = options.noSuchProcessor || this.settings.noSuchProcessor;
        opts.prePipeline = options.prePipeline || this.settings.prePipeline;
        opts.postPipeline = options.postPipeline || this.settings.postPipeline;
        opts.processors = util.extend({}, options.processors, this.settings.processors);
        if (typeof opts.noSuchValue !== 'function') {
          throw new Error('the "noSuchValue" option or setting must be function.');
        }
        if (typeof opts.noSuchProcessor !== 'function') {
          throw new Error('the "noSuchProcessor" option or setting must be function.');
        }
        if (typeof opts.prePipeline !== 'function') {
          throw new Error('the "prePipeline" option or setting must be function.');
        }
        if (typeof opts.postPipeline !== 'function') {
          throw new Error('the "postPipeline" option or setting must be function.');
        }
        return core.prepare(source, opts);
      },

      internal: {
        parser: parser,
        util: util,
        compiler: compiler,
        core: core
      }
    };
  }());

  if (typeof module !== 'undefined') {
    module.exports = tempura;
  } else if (typeof define === 'function' && define.amd) {
    define('tempura', function () {
      return tempura;
    });
  } else {
    global.tempura = tempura;
  }

}(this));
