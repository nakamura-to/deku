/**
 * @preserve tempura - simple templating library in javascript.
 * https://github.com/nakamura-to/tempura
 */
/*jslint forin: true, indent:2, plusplus: true, vars: true */
/*global module:false, define:false */
//noinspection ThisExpressionReferencesGlobalObjectJS
(function (global) {
  'use strict';
  ////////////////////////////////////////////////
  var parser = (function(){
    /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */

    var result = {
      /*
       * Parses the input with a generated parser. If the parsing is successfull,
       * returns a value explicitly or implicitly specified by the grammar from
       * which the parser was generated (see |PEG.buildParser|). If the parsing is
       * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
       */
      parse: function(input, startRule) {
        var parseFunctions = {
          "Block": parse_Block,
          "Close": parse_Close,
          "Close_unescape": parse_Close_unescape,
          "Comment": parse_Comment,
          "Content": parse_Content,
          "Id": parse_Id,
          "Inverse": parse_Inverse,
          "Mustache": parse_Mustache,
          "Open": parse_Open,
          "Open_unescape": parse_Open_unescape,
          "Path": parse_Path,
          "Program": parse_Program,
          "Statement": parse_Statement
        };

        if (startRule !== undefined) {
          if (parseFunctions[startRule] === undefined) {
            throw new Error("Invalid rule name: " + quote(startRule) + ".");
          }
        } else {
          startRule = "Program";
        }

        var pos = 0;
        var reportMatchFailures = true;
        var rightmostMatchFailuresPos = 0;
        var rightmostMatchFailuresExpected = [];
        var cache = {};

        function padLeft(input, padding, length) {
          var result = input;

          var padLength = length - input.length;
          for (var i = 0; i < padLength; i++) {
            result = padding + result;
          }

          return result;
        }

        function escape(ch) {
          var charCode = ch.charCodeAt(0);

          if (charCode <= 0xFF) {
            var escapeChar = 'x';
            var length = 2;
          } else {
            var escapeChar = 'u';
            var length = 4;
          }

          return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
        }

        function quote(s) {
          /*
           * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
           * string literal except for the closing quote character, backslash,
           * carriage return, line separator, paragraph separator, and line feed.
           * Any character may appear in the form of an escape sequence.
           */
          return '"' + s
            .replace(/\\/g, '\\\\')            // backslash
            .replace(/"/g, '\\"')              // closing quote character
            .replace(/\r/g, '\\r')             // carriage return
            .replace(/\n/g, '\\n')             // line feed
            .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
            + '"';
        }

        function matchFailed(failure) {
          if (pos < rightmostMatchFailuresPos) {
            return;
          }

          if (pos > rightmostMatchFailuresPos) {
            rightmostMatchFailuresPos = pos;
            rightmostMatchFailuresExpected = [];
          }

          rightmostMatchFailuresExpected.push(failure);
        }

        function parse_Program() {
          var cacheKey = 'Program@' + pos;
          var cachedResult = cache[cacheKey];
          if (cachedResult) {
            pos = cachedResult.nextPos;
            return cachedResult.result;
          }


          var savedPos1 = pos;
          var savedPos2 = pos;
          var result7 = parse_Statement();
          if (result7 !== null) {
            var result8 = [];
            var result9 = parse_Statement();
            while (result9 !== null) {
              result8.push(result9);
              var result9 = parse_Statement();
            }
            if (result8 !== null) {
              var result5 = [result7, result8];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          var result6 = result5 !== null
            ? (function(head, tail) {
            var statements = [head];
            var i;
            var len = tail.length;
            for (i = 0; i < len; i++) {
              statements.push(tail[i]);
            }
            return ast.newProgram(statements);
          })(result5[0], result5[1])
            : null;
          if (result6 !== null) {
            var result4 = result6;
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          if (result4 !== null) {
            var result0 = result4;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos, 0) === "") {
              var result2 = "";
              pos += 0;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\"\"");
              }
            }
            var result3 = result2 !== null
              ? (function() {
              return ast.newProgram([]);
            })()
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          }



          cache[cacheKey] = {
            nextPos: pos,
            result:  result0
          };
          return result0;
        }

        function parse_Statement() {
          var cacheKey = 'Statement@' + pos;
          var cachedResult = cache[cacheKey];
          if (cachedResult) {
            pos = cachedResult.nextPos;
            return cachedResult.result;
          }


          var result5 = parse_Block();
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var result4 = parse_Inverse();
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var result3 = parse_Mustache();
              if (result3 !== null) {
                var result0 = result3;
              } else {
                var result2 = parse_Comment();
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  var result1 = parse_Content();
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          }



          cache[cacheKey] = {
            nextPos: pos,
            result:  result0
          };
          return result0;
        }

        function parse_Block() {
          var cacheKey = 'Block@' + pos;
          var cachedResult = cache[cacheKey];
          if (cachedResult) {
            pos = cachedResult.nextPos;
            return cachedResult.result;
          }


          var savedPos0 = pos;
          var savedPos1 = pos;
          var result3 = parse_Open();
          if (result3 !== null) {
            if (input.substr(pos, 1) === "#") {
              var result4 = "#";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"#\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse_Path();
              if (result5 !== null) {
                var result6 = parse_Close();
                if (result6 !== null) {
                  var result7 = parse_Program();
                  if (result7 !== null) {
                    var result8 = parse_Open();
                    if (result8 !== null) {
                      if (input.substr(pos, 1) === "/") {
                        var result9 = "/";
                        pos += 1;
                      } else {
                        var result9 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"/\"");
                        }
                      }
                      if (result9 !== null) {
                        var result10 = parse_Path();
                        if (result10 !== null) {
                          var result11 = parse_Close();
                          if (result11 !== null) {
                            var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11];
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
          var result2 = result1 !== null
            ? (function(open, program, close) {
            return ast.newBlock(open, program, close);
          })(result1[2], result1[4], result1[7])
            : null;
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result0 = null;
            pos = savedPos0;
          }



          cache[cacheKey] = {
            nextPos: pos,
            result:  result0
          };
          return result0;
        }

        function parse_Inverse() {
          var cacheKey = 'Inverse@' + pos;
          var cachedResult = cache[cacheKey];
          if (cachedResult) {
            pos = cachedResult.nextPos;
            return cachedResult.result;
          }


          var savedPos0 = pos;
          var savedPos1 = pos;
          var result3 = parse_Open();
          if (result3 !== null) {
            if (input.substr(pos, 1) === "^") {
              var result4 = "^";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"^\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse_Path();
              if (result5 !== null) {
                var result6 = parse_Close();
                if (result6 !== null) {
                  var result7 = parse_Program();
                  if (result7 !== null) {
                    var result8 = parse_Open();
                    if (result8 !== null) {
                      if (input.substr(pos, 1) === "/") {
                        var result9 = "/";
                        pos += 1;
                      } else {
                        var result9 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"/\"");
                        }
                      }
                      if (result9 !== null) {
                        var result10 = parse_Path();
                        if (result10 !== null) {
                          var result11 = parse_Close();
                          if (result11 !== null) {
                            var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11];
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
          var result2 = result1 !== null
            ? (function(open, program, close) {
            return ast.newInverse(open, program, close);
          })(result1[2], result1[4], result1[7])
            : null;
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result0 = null;
            pos = savedPos0;
          }



          cache[cacheKey] = {
            nextPos: pos,
            result:  result0
          };
          return result0;
        }

        function parse_Mustache() {
          var cacheKey = 'Mustache@' + pos;
          var cachedResult = cache[cacheKey];
          if (cachedResult) {
            pos = cachedResult.nextPos;
            return cachedResult.result;
          }


          var savedPos2 = pos;
          var savedPos3 = pos;
          var result10 = parse_Open();
          if (result10 !== null) {
            var result11 = parse_Path();
            if (result11 !== null) {
              var result12 = parse_Close();
              if (result12 !== null) {
                var result8 = [result10, result11, result12];
              } else {
                var result8 = null;
                pos = savedPos3;
              }
            } else {
              var result8 = null;
              pos = savedPos3;
            }
          } else {
            var result8 = null;
            pos = savedPos3;
          }
          var result9 = result8 !== null
            ? (function(path) {
            return ast.newMustache(path, true);
          })(result8[1])
            : null;
          if (result9 !== null) {
            var result7 = result9;
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            var result4 = parse_Open_unescape();
            if (result4 !== null) {
              var result5 = parse_Path();
              if (result5 !== null) {
                var result6 = parse_Close_unescape();
                if (result6 !== null) {
                  var result2 = [result4, result5, result6];
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
            var result3 = result2 !== null
              ? (function(path) {
              return ast.newMustache(path);
            })(result2[1])
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          }



          cache[cacheKey] = {
            nextPos: pos,
            result:  result0
          };
          return result0;
        }

        function parse_Comment() {
          var cacheKey = 'Comment@' + pos;
          var cachedResult = cache[cacheKey];
          if (cachedResult) {
            pos = cachedResult.nextPos;
            return cachedResult.result;
          }


          var savedPos0 = pos;
          var savedPos1 = pos;
          var result3 = parse_Open();
          if (result3 !== null) {
            if (input.substr(pos, 1) === "!") {
              var result4 = "!";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"!\"");
              }
            }
            if (result4 !== null) {
              var result5 = [];
              var savedPos2 = pos;
              var savedPos3 = pos;
              var savedReportMatchFailuresVar0 = reportMatchFailures;
              reportMatchFailures = false;
              var result10 = parse_Close();
              reportMatchFailures = savedReportMatchFailuresVar0;
              if (result10 === null) {
                var result8 = '';
              } else {
                var result8 = null;
                pos = savedPos3;
              }
              if (result8 !== null) {
                if (input.length > pos) {
                  var result9 = input.charAt(pos);
                  pos++;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed('any character');
                  }
                }
                if (result9 !== null) {
                  var result7 = [result8, result9];
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
              } else {
                var result7 = null;
                pos = savedPos2;
              }
              while (result7 !== null) {
                result5.push(result7);
                var savedPos2 = pos;
                var savedPos3 = pos;
                var savedReportMatchFailuresVar0 = reportMatchFailures;
                reportMatchFailures = false;
                var result10 = parse_Close();
                reportMatchFailures = savedReportMatchFailuresVar0;
                if (result10 === null) {
                  var result8 = '';
                } else {
                  var result8 = null;
                  pos = savedPos3;
                }
                if (result8 !== null) {
                  if (input.length > pos) {
                    var result9 = input.charAt(pos);
                    pos++;
                  } else {
                    var result9 = null;
                    if (reportMatchFailures) {
                      matchFailed('any character');
                    }
                  }
                  if (result9 !== null) {
                    var result7 = [result8, result9];
                  } else {
                    var result7 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
              }
              if (result5 !== null) {
                var result6 = parse_Close();
                if (result6 !== null) {
                  var result1 = [result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
          var result2 = result1 !== null
            ? (function(comment) {
            var chars = [];
            var i;
            var len = comment.length;
            for (i = 0; i < len; i++) {
              chars.push(comment[i][1]);
            }
            return ast.newComment(chars.join(''));
          })(result1[2])
            : null;
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result0 = null;
            pos = savedPos0;
          }



          cache[cacheKey] = {
            nextPos: pos,
            result:  result0
          };
          return result0;
        }

        function parse_Content() {
          var cacheKey = 'Content@' + pos;
          var cachedResult = cache[cacheKey];
          if (cachedResult) {
            pos = cachedResult.nextPos;
            return cachedResult.result;
          }


          var savedPos0 = pos;
          var savedPos1 = pos;
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result6 = parse_Open();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result6 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            if (input.length > pos) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed('any character');
              }
            }
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [];
            while (result3 !== null) {
              result1.push(result3);
              var savedPos1 = pos;
              var savedPos2 = pos;
              var savedReportMatchFailuresVar0 = reportMatchFailures;
              reportMatchFailures = false;
              var result6 = parse_Open();
              reportMatchFailures = savedReportMatchFailuresVar0;
              if (result6 === null) {
                var result4 = '';
              } else {
                var result4 = null;
                pos = savedPos2;
              }
              if (result4 !== null) {
                if (input.length > pos) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (reportMatchFailures) {
                    matchFailed('any character');
                  }
                }
                if (result5 !== null) {
                  var result3 = [result4, result5];
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            }
          } else {
            var result1 = null;
          }
          var result2 = result1 !== null
            ? (function(content) {
            var chars = [];
            var i;
            var len = content.length;
            for (i = 0; i < len; i++) {
              chars.push(content[i][1]);
            }
            return ast.newContent(chars.join(''));
          })(result1)
            : null;
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result0 = null;
            pos = savedPos0;
          }



          cache[cacheKey] = {
            nextPos: pos,
            result:  result0
          };
          return result0;
        }

        function parse_Path() {
          var cacheKey = 'Path@' + pos;
          var cachedResult = cache[cacheKey];
          if (cachedResult) {
            pos = cachedResult.nextPos;
            return cachedResult.result;
          }


          var savedPos0 = pos;
          var savedPos1 = pos;
          var result3 = parse_Id();
          if (result3 !== null) {
            var result4 = [];
            var savedPos2 = pos;
            if (input.substr(pos, 1) === ".") {
              var result6 = ".";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse_Id();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
            while (result5 !== null) {
              result4.push(result5);
              var savedPos2 = pos;
              if (input.substr(pos, 1) === ".") {
                var result6 = ".";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\".\"");
                }
              }
              if (result6 !== null) {
                var result7 = parse_Id();
                if (result7 !== null) {
                  var result5 = [result6, result7];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            }
            if (result4 !== null) {
              var result1 = [result3, result4];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
          var result2 = result1 !== null
            ? (function(head, tail) {
            var segments = [head];
            var i;
            var len = tail.length;
            for (i = 0; i < len; i++) {
              segments.push(tail[i][1]);
            }
            return ast.newName(segments);
          })(result1[0], result1[1])
            : null;
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result0 = null;
            pos = savedPos0;
          }



          cache[cacheKey] = {
            nextPos: pos,
            result:  result0
          };
          return result0;
        }

        function parse_Id() {
          var cacheKey = 'Id@' + pos;
          var cachedResult = cache[cacheKey];
          if (cachedResult) {
            pos = cachedResult.nextPos;
            return cachedResult.result;
          }


          var savedPos0 = pos;
          if (input.substr(pos).match(/^[a-zA-Z0-9_$\-]/) !== null) {
            var result3 = input.charAt(pos);
            pos++;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("[a-zA-Z0-9_$\\-]");
            }
          }
          if (result3 !== null) {
            var result1 = [];
            while (result3 !== null) {
              result1.push(result3);
              if (input.substr(pos).match(/^[a-zA-Z0-9_$\-]/) !== null) {
                var result3 = input.charAt(pos);
                pos++;
              } else {
                var result3 = null;
                if (reportMatchFailures) {
                  matchFailed("[a-zA-Z0-9_$\\-]");
                }
              }
            }
          } else {
            var result1 = null;
          }
          var result2 = result1 !== null
            ? (function(id) {
            return id.join('');
          })(result1)
            : null;
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result0 = null;
            pos = savedPos0;
          }



          cache[cacheKey] = {
            nextPos: pos,
            result:  result0
          };
          return result0;
        }

        function parse_Open() {
          var cacheKey = 'Open@' + pos;
          var cachedResult = cache[cacheKey];
          if (cachedResult) {
            pos = cachedResult.nextPos;
            return cachedResult.result;
          }


          if (input.substr(pos, 2) === "{{") {
            var result0 = "{{";
            pos += 2;
          } else {
            var result0 = null;
            if (reportMatchFailures) {
              matchFailed("\"{{\"");
            }
          }



          cache[cacheKey] = {
            nextPos: pos,
            result:  result0
          };
          return result0;
        }

        function parse_Close() {
          var cacheKey = 'Close@' + pos;
          var cachedResult = cache[cacheKey];
          if (cachedResult) {
            pos = cachedResult.nextPos;
            return cachedResult.result;
          }


          if (input.substr(pos, 2) === "}}") {
            var result0 = "}}";
            pos += 2;
          } else {
            var result0 = null;
            if (reportMatchFailures) {
              matchFailed("\"}}\"");
            }
          }



          cache[cacheKey] = {
            nextPos: pos,
            result:  result0
          };
          return result0;
        }

        function parse_Open_unescape() {
          var cacheKey = 'Open_unescape@' + pos;
          var cachedResult = cache[cacheKey];
          if (cachedResult) {
            pos = cachedResult.nextPos;
            return cachedResult.result;
          }


          if (input.substr(pos, 3) === "{{{") {
            var result0 = "{{{";
            pos += 3;
          } else {
            var result0 = null;
            if (reportMatchFailures) {
              matchFailed("\"{{{\"");
            }
          }



          cache[cacheKey] = {
            nextPos: pos,
            result:  result0
          };
          return result0;
        }

        function parse_Close_unescape() {
          var cacheKey = 'Close_unescape@' + pos;
          var cachedResult = cache[cacheKey];
          if (cachedResult) {
            pos = cachedResult.nextPos;
            return cachedResult.result;
          }


          if (input.substr(pos, 3) === "}}}") {
            var result0 = "}}}";
            pos += 3;
          } else {
            var result0 = null;
            if (reportMatchFailures) {
              matchFailed("\"}}}\"");
            }
          }



          cache[cacheKey] = {
            nextPos: pos,
            result:  result0
          };
          return result0;
        }

        function buildErrorMessage() {
          function buildExpected(failuresExpected) {
            failuresExpected.sort();

            var lastFailure = null;
            var failuresExpectedUnique = [];
            for (var i = 0; i < failuresExpected.length; i++) {
              if (failuresExpected[i] !== lastFailure) {
                failuresExpectedUnique.push(failuresExpected[i]);
                lastFailure = failuresExpected[i];
              }
            }

            switch (failuresExpectedUnique.length) {
              case 0:
                return 'end of input';
              case 1:
                return failuresExpectedUnique[0];
              default:
                return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                  + ' or '
                  + failuresExpectedUnique[failuresExpectedUnique.length - 1];
            }
          }

          var expected = buildExpected(rightmostMatchFailuresExpected);
          var actualPos = Math.max(pos, rightmostMatchFailuresPos);
          var actual = actualPos < input.length
            ? quote(input.charAt(actualPos))
            : 'end of input';

          return 'Expected ' + expected + ' but ' + actual + ' found.';
        }

        function computeErrorPosition() {
          /*
           * The first idea was to use |String.split| to break the input up to the
           * error position along newlines and derive the line and column from
           * there. However IE's |split| implementation is so broken that it was
           * enough to prevent it.
           */

          var line = 1;
          var column = 1;
          var seenCR = false;

          for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
            var ch = input.charAt(i);
            if (ch === '\n') {
              if (!seenCR) { line++; }
              column = 1;
              seenCR = false;
            } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
              line++;
              column = 1;
              seenCR = true;
            } else {
              column++;
              seenCR = false;
            }
          }

          return { line: line, column: column };
        }



        var result = parseFunctions[startRule]();

        /*
         * The parser is now in one of the following three states:
         *
         * 1. The parser successfully parsed the whole input.
         *
         *    - |result !== null|
         *    - |pos === input.length|
         *    - |rightmostMatchFailuresExpected| may or may not contain something
         *
         * 2. The parser successfully parsed only a part of the input.
         *
         *    - |result !== null|
         *    - |pos < input.length|
         *    - |rightmostMatchFailuresExpected| may or may not contain something
         *
         * 3. The parser did not successfully parse any part of the input.
         *
         *   - |result === null|
         *   - |pos === 0|
         *   - |rightmostMatchFailuresExpected| contains at least one failure
         *
         * All code following this comment (including called functions) must
         * handle these states.
         */
        if (result === null || pos !== input.length) {
          var errorPosition = computeErrorPosition();
          throw new this.SyntaxError(
            buildErrorMessage(),
            errorPosition.line,
            errorPosition.column
          );
        }

        return result;
      },

      /* Returns the parser source code. */
      toSource: function() { return this._source; }
    };

    /* Thrown when a parser encounters a syntax error. */

    result.SyntaxError = function(message, line, column) {
      this.name = 'SyntaxError';
      this.message = message;
      this.line = line;
      this.column = column;
    };

    result.SyntaxError.prototype = Error.prototype;

    return result;
  })();
  ////////////////////////////////////////////////

  var undef;

  var util = {

    toString: Object.prototype.toString,

    slice: Array.prototype.slice,

    isObject: function (obj) {
      var toObject = Object;
      return obj === toObject(obj);
    },

    isPlainObject: function (obj) {
      return util.toString.call(obj) === '[object Object]';
    },

    isArray: function (obj) {
      return util.toString.call(obj) === '[object Array]';
    },

    isFunction: function (obj) {
      return util.toString.call(obj) === '[object Function]';
    },

    isString: function (obj) {
      return util.toString.call(obj) === '[object String]';
    },

    trim: function (s) {
      if (s === null || s === undef) {
        return '';
      }
      return s.replace(/^\s+/, '').replace(/\s+$/, '');
    },

    extend: function (target) {
      var args = util.slice.call(arguments, 1);
      var len = args.length;
      var i;
      var source;
      var key;
      if (target === null || target === undef || len === 0) {
        return target;
      }
      for (i = 0; i < len; i++) {
        source = args[i];
        if (source !== null && source !== undef) {
          for (key in source) {
            if (target[key] === undef) {
              target[key] = source[key];
            }
          }
        }
      }
      return target;
    },

    deepExtend: function (target) {
      var args = util.slice.call(arguments, 1);
      var len = args.length;
      var i;
      var source;
      var mergeRec;
      if (target === null || target === undef || len === 0) {
        return target;
      }
      mergeRec = function (target, source) {
        var key;
        var sourceProp;
        var targetProp;
        var newProp;
        for (key in source) {
          sourceProp = source[key];
          targetProp = target[key];
          var isArray = util.isArray(sourceProp);
          if (isArray || util.isPlainObject(sourceProp)) {
            newProp = targetProp || (isArray ? [] : {});
            mergeRec(newProp, sourceProp);
            target[key] = newProp;
          } else if (targetProp === undef) {
            target[key] = sourceProp;
          }
        }
      };
      for (i = 0; i < len; i++) {
        source = args[i];
        if (source !== null && source !== undef) {
          mergeRec(target, source);
        }
      }
      return target;
    },

    encode: function (html) {
      html = (html === null || html === undef) ? '' : String(html);
      return html.replace(/[&"'<>]/g, function (s) {
        switch (s) {
          case '&': return '&amp;';
          case '"': return '&quot;';
          case "'": return '&#39;';
          case '<': return '&lt;';
          case '>': return '&gt;';
          default: return s;
        }
      });
    }

  };

  var ast = {
    newProgram: function (statements) {
      return {
        type: 'type_program',
        statements: statements
      };
    },

    newBlock: function (name, program, close) {
      // TODO verify
      return {
        type: 'type_block',
        name: name,
        program: program
      };
    },

    newInverse: function (name, program, close) {
      // TODO verify
      return {
        type: 'type_inverse',
        name: name,
        program: program
      };
    },

    newContent: function (content) {
      return {
        type: 'type_content',
        content: content
      };
    },

    newComment: function (comment) {
      return {
        type: 'type_comment',
        comment: comment
      };
    },

    newMustache: function (name, escape) {
      return {
        type: 'type_mustache',
        name: name,
        escape: escape
      };
    },

    newName: function (segments) {
      var i;
      var len = segments.length;
      var strings = [];
      for (i = 0; i < len; i++) {
        strings.push(segments[i]);
      }
      return {
        type: 'type_name',
        segments: strings,
        isSimple: strings.length === 1
      };
    }
  };

  var compiler = (function () {
    var Compiler;
    var JsCompiler;

    Compiler = function (program) { 
      this.program = program;
      this.opcodes = [];
      this.children = [];
    };
    Compiler.OPCODE_PARAMLENGTH_MAP = {
      op_append: 0,
      op_appendContent: 1,
      op_escape: 0,
      op_lookupFromContext: 1,
      op_lookupFromStack: 1,
      op_invokeProgram: 1,
      op_invokeProgramInverse: 1
    };
    Compiler.prototype = {

      guid: 0,

      compile: function () {
        var statements = this.program.statements;
        var statement;
        var i;
        var len = statements.length;
        for (i = 0; i < len; i++) {
          statement = statements[i];
          this[statement.type](statement);
        }
        return this;
      },
      
      compileProgram: function (program) {
        var compiler = new Compiler(program);
        var guid = this.guid++;
        this.children[guid] = compiler.compile();
        return guid;
      },

      pushOpcode: function (name, param) {
        this.opcodes.push(name);
        if (param !== undef) {
          this.opcodes.push(param);
        }
      },

      type_block : function (node) {
        var guid;
        this.type_name(node.name);
        guid = this.compileProgram(node.program);
        this.pushOpcode('op_invokeProgram', guid);
        this.pushOpcode('op_append');
      },

      type_inverse: function (node) {
        var guid;
        this.type_name(node.name);
        guid = this.compileProgram(node.program);
        this.pushOpcode('op_invokeProgramInverse', guid);
        this.pushOpcode('op_append');
      },

      type_content: function (node) {
        this.pushOpcode('op_appendContent', node.content);
      },

      type_comment: function () {
      },

      type_mustache: function (node) {
        this.type_name(node.name);
        //this.opcode('op_invokeMustache');
        if (node.escape) {
          this.pushOpcode('op_escape');
        }
        this.pushOpcode('op_append');
      },

      type_name: function (node) {
        var segments = node.segments;
        var i;
        var len = segments.length;
        this.pushOpcode('op_lookupFromContext', segments[0]);
        for (i = 1; i < len; i++) {
          this.pushOpcode('op_lookupFromStack', segments[i]);
        }
      }

    };

    JsCompiler = function (environment, jscContext) {
      this.environment = environment;
      this.name = environment.name;
      this.source = [''];
      this.stackSlot = 0;
      this.stackVars = [];
      this.isChild = !!jscContext;
      this.renderContext = jscContext || {
        programs: []
      };
    };
    JsCompiler.prototype = {

      nameLookup: function (contextVar, name) {
        return contextVar + '["' + name + '"]';
      },

      appendToBuffer: function (s) {
        this.source.push('buffer += ' + s + ';');
      },
      
      quoteString: function (s) {
        s = s.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r');
        return '"' + s + '"'
      },

      compileChildren: function () {
        var envChildren = this.environment.children;
        var envChild;
        var jsc;
        var i;
        var len = envChildren.length;
        var index;
        for (i = 0; i < len; i++) {
          envChild = envChildren[i];
          this.renderContext.programs.push('');
          index = this.renderContext.programs.length;
          envChild.index = index;
          envChild.name = 'program' + index;
          jsc = new JsCompiler(envChild, this.renderContext);
          this.renderContext.programs[index] = jsc.compile(false);
        }
      },

      execOpcodes: function () {
        var opcodes = this.environment.opcodes;
        var i;
        var len = opcodes.length;
        var opcode;
        var j;
        var paramLen;
        var params;
        for (i = 0; i < len;) {
          opcode = opcodes[i];
          params = [];
          paramLen = Compiler.OPCODE_PARAMLENGTH_MAP[opcode];
          for (i++, j = 0; j < paramLen && i < len; i++, j++) {
            params.push(opcodes[i + j]);
          }
          this[opcode].apply(this, params);
        }
      },

      generateJs: function (asObject) {
        var indent = this.isChild ? '  ' : '';
        var body;
        var expr;
        if (this.stackVars.length > 0) {
          this.source[0] += ', ' + this.stackVars.join(', ');
        }
        if (this.isChild) {
          this.source[0] += ", buffer = ''";
        } else {
          this.source[0] += ", buffer = '', undef, escape = this.escape, handleBlock = this.handleBlock, handleInverse = this.handleInverse";
        }
        if (this.source[0]) {
          this.source[0] = 'var' + this.source[0].slice(1) + ';';
        }
        if (!this.isChild) {
          this.source[0] += '\n' + this.renderContext.programs.join('\n') + '\n';
        }
        this.source.push('return buffer;');
        body = '  ' + indent + this.source.join('\n  ' + indent);
        if (asObject) {
          return new Function('context', body);
        } else {
          expr = indent + 'function ' + (this.name || '') + ' (context) {\n' + body + '\n'+ indent + '}';
          return expr;
        }
      },

      compile: function (asObject) {
        this.compileChildren();
        this.execOpcodes();
        return this.generateJs(asObject);
      },

      expandStack: function () {
        var name;
        this.stackSlot++;
        name = 'stack' + this.stackSlot;
        if (this.stackSlot > this.stackVars.length) {
          this.stackVars.push(name)
        }
        return name;
      },

      shrinkStack: function () {
        this.stackSlot--;
      },

      currentStack: function () {
        return 'stack' + this.stackSlot;
      },

      assign: function (expr) {
        var stack = this.currentStack();
        this.source.push(stack + ' = ' + expr + ';');
      },

      op_invokeProgram: function (guid) {
        var stack = this.currentStack();
        var envChild = this.environment.children[guid];
        var expr = 'handleBlock(context, ' + stack + ', ' + envChild.name + ')';
        this.assign(expr);
      },

      op_invokeProgramInverse: function (guid) {
        var stack = this.currentStack();
        var envChild = this.environment.children[guid];
        var expr = 'handleInverse(context, ' + stack + ', ' + envChild.name + ')';
        this.assign(expr);
      },

      op_invokeMustache: function () {
        // todo unnecessary ?
      },

      op_escape: function () {
        var stack = this.currentStack();
        var expr = 'escape(' + stack + ')';
        this.assign(expr);
      },

      op_append: function () {
        var stack = this.currentStack();
        this.appendToBuffer(stack);
        this.shrinkStack();
      },

      op_appendContent: function (content) {
        var content = this.quoteString(content);
        this.appendToBuffer(content);
      },

      op_lookupFromContext: function (name) {
        var expr = name === '$this' ? 'context': this.nameLookup('context', name);
        this.expandStack();
        this.assign(expr);
      },

      op_lookupFromStack: function (name) {
        var expr;
        var stack = this.currentStack();
        if (name === '$this') {
          expr = stack;
        } else {
          expr = '(' + stack + ' === null || ' + stack + ' === undef) ? '
            + stack + ' : ' + this.nameLookup(stack, name) + ';';
        }
        this.assign(expr);
      }
    };

    var compile = function (template, templateContext) {
      var program = parser.parse(template);
      var compiler = new Compiler(program);
      var environment = compiler.compile(program);
      var jsCompiler = new JsCompiler(environment);
      return jsCompiler.compile(true);
    };

    parser.yy = ast;

    return {
      Compiler: Compiler,
      JsCompiler: JsCompiler,
      compile: compile
    };
  }());

  var core = {

    handleBlock: function (context, value, fn) {
      var result = '';
      var i;
      var len;
      var array = [];
      if (util.isArray(value)) {
        len = value.length;
        for (i = 0; i < len; i++) {
          array[i] = fn(value[i]);
        }
        result = array.join('');
      } else if (util.isFunction(value)) {
        if (value.call(context)) {
          result = fn(context);
        }
      } else if (util.isObject(value)) {
        result = fn(value);
      } else if (value) {
        result = fn(context);
      }
      return result;
    },

    handleInverse: function (context, value, fn) {
      var result = '';
      if (!value) {
        result = fn(context);
      } else if (util.isFunction(value)) {
        if (!value.call(context)) {
          result = fn(context);
        }
      } else if ((util.isArray(value) && value.length === 0)) {
        result = fn(context);
      }
      return result;
    },

    prepare: function (template, options) {
      var renderContext = {
        escape: tempura.internal.util.encode,
        handleBlock: tempura.internal.core.handleBlock,
        handleInverse: tempura.internal.core.handleInverse
      };
      var compiledTemplate = compiler.compile(template);
      return {
        render: function (data) {
          return compiledTemplate.call(renderContext, data);
        }
      };
    }

  };

  var tempura =  (function () {

    var undef;

    //noinspection JSUnusedLocalSymbols
    var defaultSettings = {
      otag: core.OTAG,
      ctag: core.CTAG,
      preserveUnknownTags: false,
      pipes: {},
      preRender: function (value, pipe) {
        var result = pipe(value);
        return result === undef ? '' : result;
      },
      noSuchValue: function (name) {
        return undef;
      },
      noSuchPipe: function (name, index, value) {
        return value;
      }
    };

    var settings = util.deepExtend({}, defaultSettings);

    return {
      name: 'tempura',

      version: '0.0.2',

      getSettings: function () {
        return settings;
      },

      setSettings: function (userSettings) {
        settings = userSettings;
      },

      mergeSettings: function (userSettings) {
        settings = util.deepExtend({}, userSettings, settings);
      },

      prepare: function (template, options) {
        options = util.deepExtend({}, options, settings);
        return core.prepare(template, options);
      },

      internal: {
        util: util,
        ast: ast,
        parser: parser,
        compiler: compiler,
        core: core
      }
    };
  }());

  if (typeof module !== 'undefined') {
    module.exports = tempura;
  } else if (typeof define === 'function' && define.amd) {
    define('tempura', function () {
      return tempura;
    });
  } else {
    global.tempura = tempura;
  }

}(this));