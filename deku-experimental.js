/* deku.js 0.0.6
 * Templating library focused on pipeline processing.
 * For all details and documentation:
 * http://nakamura-to.github.com/deku/
 */
// ./lib/internal/prelude.js
(function (global) {
  if (typeof module === 'undefined' || !module.exports) {
    global.deku = {internal: {}};
  }
}(this));
// ./lib/internal/parser.js
(function (define) {
// BEGIN PARSER
var parser = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "Block": parse_Block,
        "Comment": parse_Comment,
        "Content": parse_Content,
        "ContentChars": parse_ContentChars,
        "Id": parse_Id,
        "IdPartChar": parse_IdPartChar,
        "IdStartChar": parse_IdStartChar,
        "Inverse": parse_Inverse,
        "Mustache": parse_Mustache,
        "Partial": parse_Partial,
        "Path": parse_Path,
        "Pipeline": parse_Pipeline,
        "Program": parse_Program,
        "ReservedId": parse_ReservedId,
        "Statement": parse_Statement,
        "Whitespace": parse_Whitespace,
        "_": parse__
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "Program";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_Program() {
        var cacheKey = 'Program@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var savedPos2 = pos;
        var result7 = parse_Statement();
        if (result7 !== null) {
          var result8 = [];
          var result9 = parse_Statement();
          while (result9 !== null) {
            result8.push(result9);
            var result9 = parse_Statement();
          }
          if (result8 !== null) {
            var result5 = [result7, result8];
          } else {
            var result5 = null;
            pos = savedPos2;
          }
        } else {
          var result5 = null;
          pos = savedPos2;
        }
        var result6 = result5 !== null
          ? (function(head, tail) {
                var statements = [head];
                var i;
                var len = tail.length;
                for (i = 0; i < len; i++) {
                  statements.push(tail[i]);
                }
                return {
                  type: 'type_program',
                  statements: statements
                };
              })(result5[0], result5[1])
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 0) === "") {
            var result2 = "";
            pos += 0;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"\"");
            }
          }
          var result3 = result2 !== null
            ? (function() {
                  return {
                    type: 'type_program',
                    statements: []
                  }
                })()
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Statement() {
        var cacheKey = 'Statement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result6 = parse_Block();
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var result5 = parse_Inverse();
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var result4 = parse_Partial();
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var result3 = parse_Mustache();
              if (result3 !== null) {
                var result0 = result3;
              } else {
                var result2 = parse_Comment();
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  var result1 = parse_Content();
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Block() {
        var cacheKey = 'Block@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "{{#") {
          var result3 = "{{#";
          pos += 3;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"{{#\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_Path();
            if (result5 !== null) {
              var result6 = parse_Pipeline();
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  if (input.substr(pos, 2) === "}}") {
                    var result8 = "}}";
                    pos += 2;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"}}\"");
                    }
                  }
                  if (result8 !== null) {
                    var result9 = parse_Program();
                    if (result9 !== null) {
                      if (input.substr(pos, 3) === "{{/") {
                        var result10 = "{{/";
                        pos += 3;
                      } else {
                        var result10 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"{{/\"");
                        }
                      }
                      if (result10 !== null) {
                        var result11 = parse__();
                        if (result11 !== null) {
                          var result12 = parse_Path();
                          if (result12 !== null) {
                            var result13 = parse__();
                            if (result13 !== null) {
                              if (input.substr(pos, 2) === "}}") {
                                var result14 = "}}";
                                pos += 2;
                              } else {
                                var result14 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"}}\"");
                                }
                              }
                              if (result14 !== null) {
                                var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14];
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(open, processors, program, close) {
                verifyMatch(open, close);
                return {
                  type: 'type_block',
                  name: open,
                  processors: processors,
                  program: program
                };
              })(result1[2], result1[3], result1[6], result1[9])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Inverse() {
        var cacheKey = 'Inverse@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "{{^") {
          var result3 = "{{^";
          pos += 3;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"{{^\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_Path();
            if (result5 !== null) {
              var result6 = parse_Pipeline();
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  if (input.substr(pos, 2) === "}}") {
                    var result8 = "}}";
                    pos += 2;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"}}\"");
                    }
                  }
                  if (result8 !== null) {
                    var result9 = parse_Program();
                    if (result9 !== null) {
                      if (input.substr(pos, 3) === "{{/") {
                        var result10 = "{{/";
                        pos += 3;
                      } else {
                        var result10 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"{{/\"");
                        }
                      }
                      if (result10 !== null) {
                        var result11 = parse__();
                        if (result11 !== null) {
                          var result12 = parse_Path();
                          if (result12 !== null) {
                            var result13 = parse__();
                            if (result13 !== null) {
                              if (input.substr(pos, 2) === "}}") {
                                var result14 = "}}";
                                pos += 2;
                              } else {
                                var result14 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"}}\"");
                                }
                              }
                              if (result14 !== null) {
                                var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14];
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(open, processors, program, close) {
                verifyMatch(open, close);
                return {
                  type: 'type_inverse',
                  name: open,
                  processors: processors,
                  program: program
                };
              })(result1[2], result1[3], result1[6], result1[9])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Partial() {
        var cacheKey = 'Partial@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "{{:") {
          var result3 = "{{:";
          pos += 3;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"{{:\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_Path();
            if (result5 !== null) {
              var savedPos2 = pos;
              var result12 = parse_Whitespace();
              if (result12 !== null) {
                var result10 = [];
                while (result12 !== null) {
                  result10.push(result12);
                  var result12 = parse_Whitespace();
                }
              } else {
                var result10 = null;
              }
              if (result10 !== null) {
                var result11 = parse_Path();
                if (result11 !== null) {
                  var result9 = [result10, result11];
                } else {
                  var result9 = null;
                  pos = savedPos2;
                }
              } else {
                var result9 = null;
                pos = savedPos2;
              }
              var result6 = result9 !== null ? result9 : '';
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  if (input.substr(pos, 2) === "}}") {
                    var result8 = "}}";
                    pos += 2;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"}}\"");
                    }
                  }
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(name, contextDef) {
                return {
                  type: 'type_partial',
                  name: name,
                  context: contextDef[1] || defaultPartialContext
                };
              })(result1[2], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Mustache() {
        var cacheKey = 'Mustache@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        if (input.substr(pos, 2) === "{{") {
          var result13 = "{{";
          pos += 2;
        } else {
          var result13 = null;
          if (reportMatchFailures) {
            matchFailed("\"{{\"");
          }
        }
        if (result13 !== null) {
          var result14 = parse__();
          if (result14 !== null) {
            var result15 = parse_Path();
            if (result15 !== null) {
              var result16 = parse_Pipeline();
              if (result16 !== null) {
                var result17 = parse__();
                if (result17 !== null) {
                  if (input.substr(pos, 2) === "}}") {
                    var result18 = "}}";
                    pos += 2;
                  } else {
                    var result18 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"}}\"");
                    }
                  }
                  if (result18 !== null) {
                    var result11 = [result13, result14, result15, result16, result17, result18];
                  } else {
                    var result11 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result11 = null;
                  pos = savedPos3;
                }
              } else {
                var result11 = null;
                pos = savedPos3;
              }
            } else {
              var result11 = null;
              pos = savedPos3;
            }
          } else {
            var result11 = null;
            pos = savedPos3;
          }
        } else {
          var result11 = null;
          pos = savedPos3;
        }
        var result12 = result11 !== null
          ? (function(name, processors) {
                return {
                  type: 'type_mustache',
                  name: name,
                  processors: processors,
                  escape: true
                };
              })(result11[2], result11[3])
          : null;
        if (result12 !== null) {
          var result10 = result12;
        } else {
          var result10 = null;
          pos = savedPos2;
        }
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 3) === "{{{") {
            var result4 = "{{{";
            pos += 3;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"{{{\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result6 = parse_Path();
              if (result6 !== null) {
                var result7 = parse_Pipeline();
                if (result7 !== null) {
                  var result8 = parse__();
                  if (result8 !== null) {
                    if (input.substr(pos, 3) === "}}}") {
                      var result9 = "}}}";
                      pos += 3;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"}}}\"");
                      }
                    }
                    if (result9 !== null) {
                      var result2 = [result4, result5, result6, result7, result8, result9];
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(name, processors) {
                  return {
                    type: 'type_mustache',
                    name: name,
                    processors: processors,
                    escape: false
                  };
                })(result2[2], result2[3])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Pipeline() {
        var cacheKey = 'Pipeline@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var result5 = [];
        var savedPos3 = pos;
        var result8 = parse__();
        if (result8 !== null) {
          if (input.substr(pos, 1) === "|") {
            var result9 = "|";
            pos += 1;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"|\"");
            }
          }
          if (result9 !== null) {
            var result10 = parse__();
            if (result10 !== null) {
              var result11 = parse_Path();
              if (result11 !== null) {
                var result7 = [result8, result9, result10, result11];
              } else {
                var result7 = null;
                pos = savedPos3;
              }
            } else {
              var result7 = null;
              pos = savedPos3;
            }
          } else {
            var result7 = null;
            pos = savedPos3;
          }
        } else {
          var result7 = null;
          pos = savedPos3;
        }
        while (result7 !== null) {
          result5.push(result7);
          var savedPos3 = pos;
          var result8 = parse__();
          if (result8 !== null) {
            if (input.substr(pos, 1) === "|") {
              var result9 = "|";
              pos += 1;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\"|\"");
              }
            }
            if (result9 !== null) {
              var result10 = parse__();
              if (result10 !== null) {
                var result11 = parse_Path();
                if (result11 !== null) {
                  var result7 = [result8, result9, result10, result11];
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
              } else {
                var result7 = null;
                pos = savedPos3;
              }
            } else {
              var result7 = null;
              pos = savedPos3;
            }
          } else {
            var result7 = null;
            pos = savedPos3;
          }
        }
        var result6 = result5 !== null
          ? (function(pipes) {
                var processors = [];
                var i;
                var len = pipes.length;
                for (i = 0; i < len; i++) {
                  processors.push(pipes[i][3]);
                }
                return processors;
              })(result5)
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos2;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result2 = [];
          var result3 = result2 !== null
            ? (function() {
                  return [];
                })()
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Comment() {
        var cacheKey = 'Comment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "{{!") {
          var result3 = "{{!";
          pos += 3;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"{{!\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var savedPos3 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 2) === "}}") {
            var result9 = "}}";
            pos += 2;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"}}\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result9 === null) {
            var result7 = '';
          } else {
            var result7 = null;
            pos = savedPos3;
          }
          if (result7 !== null) {
            if (input.length > pos) {
              var result8 = input.charAt(pos);
              pos++;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed('any character');
              }
            }
            if (result8 !== null) {
              var result6 = [result7, result8];
            } else {
              var result6 = null;
              pos = savedPos2;
            }
          } else {
            var result6 = null;
            pos = savedPos2;
          }
          while (result6 !== null) {
            result4.push(result6);
            var savedPos2 = pos;
            var savedPos3 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 2) === "}}") {
              var result9 = "}}";
              pos += 2;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\"}}\"");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result9 === null) {
              var result7 = '';
            } else {
              var result7 = null;
              pos = savedPos3;
            }
            if (result7 !== null) {
              if (input.length > pos) {
                var result8 = input.charAt(pos);
                pos++;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result8 !== null) {
                var result6 = [result7, result8];
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            } else {
              var result6 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 2) === "}}") {
              var result5 = "}}";
              pos += 2;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"}}\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(chars) {
                var comment = '';
                var i;
                var len = chars.length;
                for (i = 0; i < len; i++) {
                  comment += chars[i][1];
                }
                return {
                  type: 'type_comment',
                  comment: comment
                };
              })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Content() {
        var cacheKey = 'Content@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse_ContentChars();
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            var result3 = parse_ContentChars();
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(chars) {
                var content = '';
                var i;
                var len = chars.length;
                for (i = 0; i < len; i++) {
                  content += chars[i];
                }
                return {
                  type: 'type_content',
                  content: content
                };
              })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ContentChars() {
        var cacheKey = 'ContentChars@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos5 = pos;
        var savedPos6 = pos;
        if (input.substr(pos, 1) === "\\") {
          var result15 = "\\";
          pos += 1;
        } else {
          var result15 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\\\"");
          }
        }
        if (result15 !== null) {
          if (input.substr(pos, 1) === "\\") {
            var result16 = "\\";
            pos += 1;
          } else {
            var result16 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result16 !== null) {
            var savedPos7 = pos;
            var savedReportMatchFailuresVar1 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 2) === "{{") {
              var result18 = "{{";
              pos += 2;
            } else {
              var result18 = null;
              if (reportMatchFailures) {
                matchFailed("\"{{\"");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar1;
            if (result18 !== null) {
              var result17 = '';
              pos = savedPos7;
            } else {
              var result17 = null;
            }
            if (result17 !== null) {
              var result13 = [result15, result16, result17];
            } else {
              var result13 = null;
              pos = savedPos6;
            }
          } else {
            var result13 = null;
            pos = savedPos6;
          }
        } else {
          var result13 = null;
          pos = savedPos6;
        }
        var result14 = result13 !== null
          ? (function(backslash) {
                return backslash;
              })(result13[1])
          : null;
        if (result14 !== null) {
          var result12 = result14;
        } else {
          var result12 = null;
          pos = savedPos5;
        }
        if (result12 !== null) {
          var result0 = result12;
        } else {
          var savedPos3 = pos;
          var savedPos4 = pos;
          if (input.substr(pos, 1) === "\\") {
            var result10 = "\\";
            pos += 1;
          } else {
            var result10 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result10 !== null) {
            if (input.substr(pos, 2) === "{{") {
              var result11 = "{{";
              pos += 2;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\"{{\"");
              }
            }
            if (result11 !== null) {
              var result8 = [result10, result11];
            } else {
              var result8 = null;
              pos = savedPos4;
            }
          } else {
            var result8 = null;
            pos = savedPos4;
          }
          var result9 = result8 !== null
            ? (function(open) {
                  return open;
                })(result8[1])
            : null;
          if (result9 !== null) {
            var result7 = result9;
          } else {
            var result7 = null;
            pos = savedPos3;
          }
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 2) === "{{") {
              var result6 = "{{";
              pos += 2;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"{{\"");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result6 === null) {
              var result4 = '';
            } else {
              var result4 = null;
              pos = savedPos2;
            }
            if (result4 !== null) {
              if (input.length > pos) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result5 !== null) {
                var result2 = [result4, result5];
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
            var result3 = result2 !== null
              ? (function(char) {
                    return char;
                  })(result2[1])
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Path() {
        var cacheKey = 'Path@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result9 = parse_ReservedId();
        if (result9 !== null) {
          var result3 = result9;
        } else {
          var result8 = parse_Id();
          if (result8 !== null) {
            var result3 = result8;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          if (input.substr(pos, 1) === ".") {
            var result6 = ".";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result6 !== null) {
            var result7 = parse_Id();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            if (input.substr(pos, 1) === ".") {
              var result6 = ".";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse_Id();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(head, tail) {
                var segments = [head.id || head];
                var i;
                var len = tail.length;
                for (i = 0; i < len; i++) {
                  segments.push(tail[i][1]);
                }
                return {
                  type: 'type_name',
                  path: segments.join('.'),
                  segments: segments,
                  contextType: head.type || 'default',
                  contextIndex: head.index || '0'
                };
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ReservedId() {
        var cacheKey = 'ReservedId@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos7 = pos;
        if (input.substr(pos, 5) === "@root") {
          var result23 = "@root";
          pos += 5;
        } else {
          var result23 = null;
          if (reportMatchFailures) {
            matchFailed("\"@root\"");
          }
        }
        var result24 = result23 !== null
          ? (function() {
                return {
                  type: 'root',
                  id: '@root'
                };
              })()
          : null;
        if (result24 !== null) {
          var result22 = result24;
        } else {
          var result22 = null;
          pos = savedPos7;
        }
        if (result22 !== null) {
          var result0 = result22;
        } else {
          var savedPos6 = pos;
          if (input.substr(pos, 6) === "@index") {
            var result20 = "@index";
            pos += 6;
          } else {
            var result20 = null;
            if (reportMatchFailures) {
              matchFailed("\"@index\"");
            }
          }
          var result21 = result20 !== null
            ? (function() {
                  return {
                    type: 'index',
                    id: '@index'
                  };  
                })()
            : null;
          if (result21 !== null) {
            var result19 = result21;
          } else {
            var result19 = null;
            pos = savedPos6;
          }
          if (result19 !== null) {
            var result0 = result19;
          } else {
            var savedPos5 = pos;
            if (input.substr(pos, 8) === "@hasNext") {
              var result17 = "@hasNext";
              pos += 8;
            } else {
              var result17 = null;
              if (reportMatchFailures) {
                matchFailed("\"@hasNext\"");
              }
            }
            var result18 = result17 !== null
              ? (function() {
                    return {
                      type: 'hasNext',
                      id: '@hasNext'
                    };
                  })()
              : null;
            if (result18 !== null) {
              var result16 = result18;
            } else {
              var result16 = null;
              pos = savedPos5;
            }
            if (result16 !== null) {
              var result0 = result16;
            } else {
              var savedPos4 = pos;
              if (input.substr(pos, 7) === "@length") {
                var result14 = "@length";
                pos += 7;
              } else {
                var result14 = null;
                if (reportMatchFailures) {
                  matchFailed("\"@length\"");
                }
              }
              var result15 = result14 !== null
                ? (function() {
                      return {
                        type: 'length',
                        id: '@length'
                      };
                    })()
                : null;
              if (result15 !== null) {
                var result13 = result15;
              } else {
                var result13 = null;
                pos = savedPos4;
              }
              if (result13 !== null) {
                var result0 = result13;
              } else {
                var savedPos2 = pos;
                var savedPos3 = pos;
                if (input.substr(pos, 1) === "@") {
                  var result10 = "@";
                  pos += 1;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"@\"");
                  }
                }
                if (result10 !== null) {
                  if (input.substr(pos).match(/^[0-9]/) !== null) {
                    var result12 = input.charAt(pos);
                    pos++;
                  } else {
                    var result12 = null;
                    if (reportMatchFailures) {
                      matchFailed("[0-9]");
                    }
                  }
                  if (result12 !== null) {
                    var result11 = [];
                    while (result12 !== null) {
                      result11.push(result12);
                      if (input.substr(pos).match(/^[0-9]/) !== null) {
                        var result12 = input.charAt(pos);
                        pos++;
                      } else {
                        var result12 = null;
                        if (reportMatchFailures) {
                          matchFailed("[0-9]");
                        }
                      }
                    }
                  } else {
                    var result11 = null;
                  }
                  if (result11 !== null) {
                    var result8 = [result10, result11];
                  } else {
                    var result8 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos3;
                }
                var result9 = result8 !== null
                  ? (function(index) {
                        return {
                          type: 'ref',
                          index: index,
                          id: '@' + index
                        };
                      })(result8[1])
                  : null;
                if (result9 !== null) {
                  var result7 = result9;
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
                if (result7 !== null) {
                  var result0 = result7;
                } else {
                  var savedPos1 = pos;
                  if (input.substr(pos, 5) === "@this") {
                    var result5 = "@this";
                    pos += 5;
                  } else {
                    var result5 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"@this\"");
                    }
                  }
                  var result6 = result5 !== null
                    ? (function() {
                          return {
                            type: 'ref',
                            index: 0,
                            id: '@this'
                          };
                        })()
                    : null;
                  if (result6 !== null) {
                    var result4 = result6;
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                  if (result4 !== null) {
                    var result0 = result4;
                  } else {
                    var savedPos0 = pos;
                    if (input.substr(pos, 7) === "@parent") {
                      var result2 = "@parent";
                      pos += 7;
                    } else {
                      var result2 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"@parent\"");
                      }
                    }
                    var result3 = result2 !== null
                      ? (function() {
                            return {
                              type: 'ref',
                              index: 1,
                              id: '@parent'
                            };
                          })()
                      : null;
                    if (result3 !== null) {
                      var result1 = result3;
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                    if (result1 !== null) {
                      var result0 = result1;
                    } else {
                      var result0 = null;;
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Id() {
        var cacheKey = 'Id@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_IdStartChar();
        if (result3 !== null) {
          var result4 = [];
          var result5 = parse_IdPartChar();
          while (result5 !== null) {
            result4.push(result5);
            var result5 = parse_IdPartChar();
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(head, tail) {
                var buf = head;
                var i;
                var len = tail.length;
                for (i = 0; i < len; i++) {
                  buf += tail[i];
                }
                return buf;
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IdStartChar() {
        var cacheKey = 'IdStartChar@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[^\0- {#^!:|\/.]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[^\\0- {#^!:|\\/.]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IdPartChar() {
        var cacheKey = 'IdPartChar@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[^\0- }|.]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[^\\0- }|.]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__() {
        var cacheKey = '_@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        var result1 = parse_Whitespace();
        while (result1 !== null) {
          result0.push(result1);
          var result1 = parse_Whitespace();
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Whitespace() {
        var cacheKey = 'Whitespace@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[ 	\n\r]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[ 	\\n\\r]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
    var defaultPartialContext = {
      
      type: 'type_name',
      
      path: '@0',
      
      segments: ['@0'],
      
      contextType: 'ref',
      
      contextIndex: '0'
      
    };
      
  
      
    function verifyMatch(open, close)  {
      
      if (open.path !== close.path) {
      
        var errorPosition = computeErrorPosition();
      
        throw new parser.SyntaxError(
      
          open.path + " doesn't match " + close.path,
      
          errorPosition.line,
      
          errorPosition.column
      
        );
      
      }
      
    }
      
  
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
// END PARSER

  define(parser);

}(function (parser) {
    if (typeof module !== 'undefined' && module.exports) {
      module.exports = parser;
    } else {
      deku.internal.parser = parser;
    }
  }
));

// ./lib/internal/compiler.js
(function (define, require) {
  var parser = require('parser');
  var compiler = (function () {
    var Compiler;
    var JsCompiler;

    Compiler = function (context) {
      this.opcodes = [];
      this.context = context || {
        all: []
      };
      this.index = this.context.all.length;
      this.name = 'program' + this.index;
      this.context.all.push(this);
    };

    Compiler.OPCODE_PARAM_LENGTH_MAP = {
      op_append: 0,
      op_appendContent: 1,
      op_applyProcessor: 2,
      op_applyPrePipeline: 1,
      op_applyPostPipeline: 1,
      op_escape: 0,
      op_evaluateValue: 1,
      op_lookupHead: 4,
      op_lookupTail: 2,
      op_invokePartial: 1,
      op_invokeProgram: 1,
      op_invokeProgramInverse: 1
    };

    Compiler.prototype = {

      compile: function (program) {
        var statements = program.statements;
        var statement;
        var i;
        var len = statements.length;
        for (i = 0; i < len; i++) {
          statement = statements[i];
          this[statement.type](statement);
        }
        return this;
      },

      compileProgram: function (program) {
        var compiler = new Compiler(this.context);
        return compiler.compile(program);
      },

      pushOpcode: function (name, p1, p2, p3, p4) {
        this.opcodes.push(name);
        if (p1 !== void 0) {
          this.opcodes.push(p1);
        }
        if (p2 !== void 0) {
          this.opcodes.push(p2);
        }
        if (p3 !== void 0) {
          this.opcodes.push(p3);
        }
        if (p4 !== void 0) {
          this.opcodes.push(p4);
        }
      },

      type_name: function (node, varType) {
        var segments = node.segments;
        var i;
        var len = segments.length;
        this.pushOpcode('op_lookupHead', segments[0], varType, node.contextType, node.contextIndex);
        for (i = 1; i < len; i++) {
          this.pushOpcode('op_lookupTail', segments[i], varType);
        }
      },

      pipeline: function (node) {
        var processors = node.processors;
        var i;
        var len = processors.length;
        var name = node.name;
        var path = name.path;
        var processor;
        this.type_name(name, 'value');
        this.pushOpcode('op_evaluateValue', path);
        this.pushOpcode('op_applyPrePipeline', path);
        for (i = 0; i < len; i++) {
          processor = processors[i];
          this.type_name(processor, 'processor');
          this.pushOpcode('op_applyProcessor', processor.path, path);
        }
        this.pushOpcode('op_applyPostPipeline', path);
      },

      type_block : function (node) {
        var environment = this.compileProgram(node.program);
        this.pipeline(node);
        this.pushOpcode('op_invokeProgram', environment.name);
        this.pushOpcode('op_append');
      },

      type_inverse: function (node) {
        var environment = this.compileProgram(node.program);
        this.pipeline(node);
        this.pushOpcode('op_invokeProgramInverse', environment.name);
        this.pushOpcode('op_append');
      },

      type_partial: function (node) {
        this.type_name(node.context, 'value');
        this.pushOpcode('op_invokePartial', node.name.path);
        this.pushOpcode('op_append');
      },

      type_mustache: function (node) {
        this.pipeline(node);
        if (node.escape) {
          this.pushOpcode('op_escape');
        }
        this.pushOpcode('op_append');
      },

      type_content: function (node) {
        this.pushOpcode('op_appendContent', node.content);
      },

      type_comment: function () {
      }
    };

    JsCompiler = function (environment) {
      this.environment = environment;
      this.name = environment.name;
      this.allEnvironments = environment.context.all;
      this.source = [''];
    };

    JsCompiler.prototype = {

      lookup: function (contextName, propName) {
        return contextName + '["' + propName + '"]';
      },

      appendToBuffer: function (s) {
        this.source.push('buffer += ' + s + ';');
      },

      quoteString: (function () {
        var map =  {
          '\\': '\\\\',
          '"': '\\"',
          '\n': '\\n',
          '\r': '\\r'
        };
        return function (value) {
          return '"' + value.replace(/[\\"\n\r]/g, function(s) {
            return map[s];
          }) + '"';
        }
      }()),

      compileDescendants: function () {
        var result = [];
        var allEnvironments = this.allEnvironments;
        var i;
        var len = allEnvironments.length;
        var environment;
        var jsc;
        var subProgram;
        for (i = 1; i < len; i++) {
          environment = allEnvironments[i];
          jsc = new JsCompiler(environment);
          subProgram = jsc.compileSubProgram();
          result.push(subProgram);
        }
        return result;
      },

      execOpcodes: function () {
        var opcodes = this.environment.opcodes;
        var i;
        var len = opcodes.length;
        var opcode;
        var j;
        var paramLen;
        var params;
        for (i = 0; i < len;) {
          opcode = opcodes[i];
          params = [];
          paramLen = Compiler.OPCODE_PARAM_LENGTH_MAP[opcode];
          for (i++, j = 0; i < len && j < paramLen; i++, j++) {
            params.push(opcodes[i]);
          }
          this[opcode].apply(this, params);
        }
      },

      generate: function (subPrograms, asString) {
        var body;
        this.source[0] = this.source[0] + 'var self = this, value, valueContext, buffer = "", contextStack = contextStack || [context], ' +
          'escape = this.escape, handleBlock = this.handleBlock, handleInverse = this.handleInverse, handlePartial = this.handlePartial, ' +
          'noSuchValue = this.noSuchValue, noSuchProcessor = this.noSuchProcessor, prePipeline = this.prePipeline, postPipeline = this.postPipeline, ' +
          'processors = this.processors, processor, processorContext, values = this.values;' +
          '\n' + subPrograms.join('\n');
        this.source.push('return buffer;');
        body = '  ' + this.source.join('\n  ');
        if (asString) {
          return 'function (context, contextStack, index, hasNext, length) {\n' + body + '\n' + '}';
        } else {
          return new Function('context', 'contextStack', 'index', 'hasNext', 'length', body);
        }
      },

      compile: function (asString) {
        var subPrograms = this.compileDescendants();
        this.execOpcodes();
        return this.generate(subPrograms, asString);
      },

      generateSubProgram: function () {
        var body;
        var indent = '  ';
        this.source[0] = this.source[0] + 'var value, valueContext, buffer = "";';
        this.source.push('return buffer;');
        body = indent + indent + this.source.join('\n  ' + indent);
        return indent + 'function ' + this.name + ' (context, contextStack, index, hasNext, length) {\n' + body + '\n'+ indent + '}';
      },

      compileSubProgram: function () {
        this.execOpcodes();
        return this.generateSubProgram();
      },

      op_invokeProgram: function (programName) {
        this.source.push('value = handleBlock.call(self, context, contextStack, value, ' + programName + ');');
      },

      op_invokeProgramInverse: function (programName) {
        this.source.push('value = handleInverse.call(self, context, contextStack, value, ' + programName + ');');
      },

      op_invokePartial: function (partialName) {
        this.source.push('value = handlePartial.call(self, context, contextStack, index, hasNext, length, value, "' + partialName + '");');
      },

      op_applyProcessor: function (processorName, valueName) {
        this.source.push('if (typeof processor === "function") { value = processor.call(processorContext, value, "' + valueName + '", index, hasNext, length); }');
        this.source.push('else { processor = ' + this.lookup('processors', processorName) + ';');
        this.source.push('  if (typeof processor === "function") { value = processor.call(context, value, "' + valueName + '", index, hasNext, length); }');
        this.source.push('  else { value = noSuchProcessor.call(context, "' + processorName + '", value, "' + valueName + '"); }}');
      },

      op_applyPrePipeline: function (valueName) {
        this.source.push('value = prePipeline.call(context, value, "' + valueName + '", index, hasNext, length);');
      },

      op_applyPostPipeline: function (valueName) {
        this.source.push('value = postPipeline.call(context, value, "' + valueName + '", index, hasNext, length);');
      },

      op_escape: function () {
        this.source.push('value = escape(value);');
      },

      op_escapeAndAppendContent: function (content) {
        content = this.quoteString(content);
        this.appendToBuffer('escape(value) + ' + content);
      },

      op_append: function () {
        this.appendToBuffer('value');
      },

      op_appendContent: function (content) {
        content = this.quoteString(content);
        this.appendToBuffer(content);
      },

      op_evaluateValue: function (name) {
        this.source.push('if (typeof value === "function") { value = value.call(valueContext); }');
        this.source.push('else if (value === void 0) {');
        this.source.push('  value = values["' + name + '"];');
        this.source.push('  if (value === void 0) { value = noSuchValue.call(context, "' + name + '"); } }');
      },

      variableContextMap: {
        'value': 'valueContext',
        'processor': 'processorContext'
      },
      
      variableMap: {
        'value': 'value',
        'processor': 'processor'        
      },
      
      op_lookupHead: function (name, variableType, contextType, contextIndex) {
        var variableContext = this.variableContextMap[variableType];
        var variable = this.variableMap[variableType];
        this.source.push(variableContext + ' = context;');
        switch (contextType) {
          case 'root':
            this.source.push(variable + ' = contextStack[0];');
            break;
          case 'index':
            this.source.push(variable + ' = index;');
            break;
          case 'hasNext':
            this.source.push(variable + ' = hasNext;');
            break;
          case 'length':
            this.source.push(variable + ' = length;');
            break;
          case 'ref':
            this.source.push(variable + ' = contextStack[contextStack.length - 1 - ' + contextIndex + '];');
            break;
          case 'default':
            this.source.push(variable + ' = ' + this.lookup(variableContext, name) + ';');
            break;
          default:
            throw new Error('unreachable.');
        }
      },

      op_lookupTail: function (name, varType) {
        var localContext = this.variableContextMap[varType];
        var local = this.variableMap[varType];
        this.source.push('if (' + local + ' != null) { ' + localContext + ' = ' + local + '; ' + local + ' = ' + this.lookup(local, name) + ';}');
      }
    };

    var parse = function (template) {
      try {
        return parser.parse(template);
      } catch (e) {
        if (e.name === 'SyntaxError') {
          throw new Error(e.message + ' line=' + e.line + '. column=' + e.column + '.\n' + template);
        }
        throw e;
      }
    };

    var compile = function (source, asString) {
      var ast = parse(source);
      var compiler = new Compiler();
      var environment = compiler.compile(ast);
      var jsCompiler = new JsCompiler(environment);
      return jsCompiler.compile(asString);
    };

    return {
      Compiler: Compiler,
      JsCompiler: JsCompiler,
      parse: parse,
      compile: compile
    };
  }());

  define(compiler);
  
}(function (compiler) { 
    if (typeof module !== 'undefined' && module.exports) {
      module.exports = compiler;
    } else {
      deku.internal.compiler = compiler;
    }
  },
  function (name) {
    if (typeof module !== 'undefined' && module.exports) {
      return require('./' + name);
    } else {
      return deku.internal[name];
    }
  }
));
// ./lib/internal/core.js
(function (define, require) {
  var compiler = require('compiler');
  var core = {
    isObject: function (obj) {
      return obj === Object(obj);
    },

    isArray: Array.isArray || function (obj) {
      return Object.prototype.toString.call(obj) === '[object Array]';
    },

    extend: function (target) {
      var len = arguments.length;
      var i;
      var source;
      var key;
      if (target == null) {
        return target;
      }
      for (i = 1; i < len; i++) {
        source = arguments[i];
        if (source != null) {
          for (key in source) {
            if (target[key] === void 0) {
              target[key] = source[key];
            }
          }
        }
      }
      return target;
    },

    escape: (function () {
      var map = {
        '&': '&amp;',
        '"': '&quot;',
        "'": '&#39;',
        '<': '&lt;',
        '>': '&gt;'
      };
      var checkRegex = /[&"'<>]/;
      var replaceRegex = /[&"'<>]/g;
      return function (value) {
        if (value == null) {
          return '';
        }
        switch (typeof value) {
          case 'string': break;
          case 'number': return value;
          default: value = value.toString();
        }
        if (!checkRegex.test(value)) {
          return value;
        }
        return value.replace(replaceRegex, function (s) {
          return map[s];
        });
      };
    }()),

    compile: typeof compiler !== 'undefined' ? compiler.compile : function () {
      throw new Error("The deku.runtime.js doesn't support to compile partial templates. " +
        "Consider to compile all partial templates with deku compiler in advance.");
    },


    handleBlock: function (context, contextStack, value, fn) {
      var result = '';
      var i;
      var len;
      var element;
      if (core.isArray(value)) {
        len = value.length;
        for (i = 0; i < len; i++) {
          element = value[i];
          contextStack.push(element);
          result += fn(element, contextStack, i, i + 1 < len, len);
          contextStack.pop();
        }
      } else if (core.isObject(value)) {
        contextStack.push(value);
        result = fn(value, contextStack);
        contextStack.pop();
      } else if (value) {
        result = fn(context, contextStack);
      }
      return result;
    },

    handleInverse: function (context, contextStack, value, fn) {
      var result = '';
      if (!value) {
        result = fn(context, contextStack);
      } else if (core.isArray(value) && value.length === 0) {
        result = fn(context, contextStack);
      }
      return result;
    },

    handlePartial: function (context, contextStack, index, hasNext, length, value, partialName) {
      var self = this;
      var template;
      var fn;
      var result;
      template = self.partialResolver(partialName);
      if (template == null) {
        return self.noSuchPartial(partialName, value);
      }
      if (typeof template === "function") {
        fn = template;
      } else {
        fn = core.compile(template);
        self.partials[partialName] = fn;
      }
      contextStack.push(value);
      result = fn.call(self, value, contextStack, index, hasNext, length);
      contextStack.pop();
      return result;
    },

    prepare: function (template, options) {
      var templateContext = {
        escape: core.escape,
        handleBlock: core.handleBlock,
        handleInverse: core.handleInverse,
        handlePartial: core.handlePartial,
        noSuchValue: options.noSuchValue,
        noSuchProcessor: options.noSuchProcessor,
        noSuchPartial: options.noSuchPartial,
        prePipeline: options.prePipeline,
        postPipeline: options.postPipeline,
        partialResolver: options.partialResolver,
        values: options.values,
        partials: options.partials,
        templates: options.templates,
        processors: options.processors
      };
      return function (data) {
        return template.call(templateContext, data  != null ? data : {});
      };
    }
  };
  
  define(core);
  
}(function (core) {
    if (typeof module !== 'undefined' && module.exports) {
      module.exports = core;
    } else {
      deku.internal.core = core;
    }
  },
  function (name) {
    if (typeof module !== 'undefined' && module.exports) {
      return require('./' + name);
    } else {
      return deku.internal[name];
    }
  }
));
// ./lib/api.js
(function (define, require, deku) {
  var core = require('core');
  var prepare = function (template, options) {
    var opts = {};
    options = options || {};
    opts.noSuchValue = options.noSuchValue || deku.noSuchValue;
    opts.noSuchPartial = options.noSuchPartial || deku.noSuchPartial;
    opts.noSuchProcessor = options.noSuchProcessor || deku.noSuchProcessor;
    opts.prePipeline = options.prePipeline || deku.prePipeline;
    opts.postPipeline = options.postPipeline || deku.postPipeline;
    opts.partialResolver = options.partialResolver || deku.partialResolver;
    opts.values = core.extend({}, options.values, deku.values);
    opts.partials = core.extend({}, options.partials, deku.partials);
    opts.templates = core.extend({}, options.templates, deku.templates);
    opts.processors = core.extend({}, options.processors, deku.processors);
    if (typeof opts.noSuchValue !== 'function') {
      throw new Error('The "noSuchValue" option or setting must be a function.');
    }
    if (typeof opts.noSuchPartial !== 'function') {
      throw new Error('The "noSuchPartial" option or setting must be a function.');
    }
    if (typeof opts.noSuchProcessor !== 'function') {
      throw new Error('The "noSuchProcessor" option or setting must be a function.');
    }
    if (typeof opts.prePipeline !== 'function') {
      throw new Error('The "prePipeline" option or setting must be a function.');
    }
    if (typeof opts.postPipeline !== 'function') {
      throw new Error('The "postPipeline" option or setting must be a function.');
    }
    return core.prepare(template, opts);
  };
    
  // information
  deku.name = 'deku';
  deku.version = '0.0.6';

  // settings
  deku.partials = {};
  deku.templates = {};
  deku.values = {};
  deku.processors = {};
  deku.prePipeline = function (value, valueName, index, hasNext, length) {
    return value;
  };
  deku.postPipeline = function (value, valueName, index, hasNext, length) {
    return value == null ? '': value;
  };
  deku.noSuchValue = function (valueName) {
    throw new Error('The value "' + valueName + '" is not found.');
  };
  deku.noSuchPartial = function (partialName, context) {
    throw new Error('The partial "' + partialName + '" is not found.');
  };
  deku.noSuchProcessor = function (processorName, value, valueName) {
    throw new Error('The processor "' + processorName + '" for the value "' + valueName + '" is not found.');
  };
  deku.partialResolver = function (partialName) {
    var templateContext = this;
    var template = templateContext.partials[partialName];
    if (template == null) {
      template = templateContext.templates[partialName];
    }
    return template;
  };

  // behavior
  deku.compile = function (source, options) {
    var template;
    var type = typeof source;
    if (type === 'string') {
      template = core.compile(source);
    } else if (type === 'function') {
      template = source;
    } else {
      throw new Error('The argument "source" must be a string or a function.');
    }
    return prepare(template, options);
  };
  deku.use = function (name, options) {
    var template = deku.templates[name];
    var type = typeof template;
    if (type === 'undefined') {
      throw new Error('The template "' + name + '" is not found.');      
    } else if (type !== 'function') {
      throw new Error('The template "' + name + '" must be a function.');
    }
    return prepare(template, options);
  };

  define(deku);

}(function (deku) {
    if (typeof module !== 'undefined' && module.exports) {
      module.exports = deku;
    } 
    if (typeof define === 'function' && define.amd) {
      define(deku);
    }
  },
  function (name) {
    if (typeof module !== 'undefined' && module.exports) {
      return require('./internal/' + name);
    } else {
      return deku.internal[name];
    }
  },
  typeof module !== 'undefined' && module.exports? {} : deku
));